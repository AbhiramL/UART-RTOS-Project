
Basic_RTOS_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a38  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  20000000  00002a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000aa8  20000100  00002b38  00020100  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
  5 .debug_info   00057b4a  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000065d9  00000000  00000000  00077ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000077ec  00000000  00000000  0007e2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000928  00000000  00000000  00085a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001220  00000000  00000000  000863b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001e170  00000000  00000000  000875d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e492  00000000  00000000  000a5748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00086c1c  00000000  00000000  000b3bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001800  00000000  00000000  0013a7f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 c5 02 00 00 ab 02 00 00 ab 02 00 00     ... ............
	...
      2c:	ab 02 00 00 00 00 00 00 00 00 00 00 ab 02 00 00     ................
      3c:	19 03 00 00 ab 02 00 00 ab 02 00 00 ab 02 00 00     ................
      4c:	ab 02 00 00 ab 02 00 00 ab 02 00 00 ab 02 00 00     ................
      5c:	b1 02 00 00 ab 02 00 00 51 18 00 00 ab 02 00 00     ........Q.......
      6c:	ab 02 00 00 ab 02 00 00 ab 02 00 00 61 18 00 00     ............a...
      7c:	ab 02 00 00 ab 02 00 00 ab 02 00 00 ab 02 00 00     ................
      8c:	ab 02 00 00 00 00 00 00 ab 02 00 00 ab 02 00 00     ................
      9c:	ab 02 00 00 ab 02 00 00 ab 02 00 00 ab 02 00 00     ................
      ac:	ab 02 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000100 	.word	0x20000100
      d4:	00000000 	.word	0x00000000
      d8:	00002a34 	.word	0x00002a34

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000104 	.word	0x20000104
     108:	00002a34 	.word	0x00002a34
     10c:	200000fc 	.word	0x200000fc
     110:	00000000 	.word	0x00000000

00000114 <_ZN8uartPort5writeEPhm>:
	while (uartRegisters->SYNCBUSY.bit_data.enable){};
	
}

uint32_t uartPort::write(uint8_t* buf, uint32_t maxSize)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	188d      	adds	r5, r1, r2
	uint32_t i = 0;
	for(i = 0; i < maxSize; i++)
     118:	42a9      	cmp	r1, r5
     11a:	d00b      	beq.n	134 <_ZN8uartPort5writeEPhm+0x20>
	{	
		while(!(uartRegisters->INTFLAG.bit_data.dre)){};		
     11c:	6804      	ldr	r4, [r0, #0]
     11e:	7e23      	ldrb	r3, [r4, #24]
     120:	07db      	lsls	r3, r3, #31
     122:	d5fc      	bpl.n	11e <_ZN8uartPort5writeEPhm+0xa>
		uartRegisters->DATA.bit_data.data = buf[i];
     124:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     126:	780e      	ldrb	r6, [r1, #0]
     128:	0a5b      	lsrs	r3, r3, #9
     12a:	025b      	lsls	r3, r3, #9
     12c:	4333      	orrs	r3, r6
     12e:	8523      	strh	r3, [r4, #40]	; 0x28
     130:	3101      	adds	r1, #1
	for(i = 0; i < maxSize; i++)
     132:	e7f1      	b.n	118 <_ZN8uartPort5writeEPhm+0x4>
	}
	return i;
}
     134:	0010      	movs	r0, r2
     136:	bd70      	pop	{r4, r5, r6, pc}

00000138 <_ZN8uartPort13initClockNVICEv>:
void uartPort::initClockNVIC( void )
{
	uint8_t clockId = 0;
	IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

	if(uartRegisters == SERIAL0)
     138:	4b0c      	ldr	r3, [pc, #48]	; (16c <_ZN8uartPort13initClockNVICEv+0x34>)
     13a:	6802      	ldr	r2, [r0, #0]
{
     13c:	b510      	push	{r4, lr}
	if(uartRegisters == SERIAL0)
     13e:	429a      	cmp	r2, r3
     140:	d113      	bne.n	16a <_ZN8uartPort13initClockNVICEv+0x32>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     142:	2280      	movs	r2, #128	; 0x80
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     144:	24c2      	movs	r4, #194	; 0xc2
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     146:	4b0a      	ldr	r3, [pc, #40]	; (170 <_ZN8uartPort13initClockNVICEv+0x38>)
     148:	0092      	lsls	r2, r2, #2
     14a:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     14c:	00a4      	lsls	r4, r4, #2
     14e:	591a      	ldr	r2, [r3, r4]
     150:	4908      	ldr	r1, [pc, #32]	; (174 <_ZN8uartPort13initClockNVICEv+0x3c>)
     152:	4011      	ands	r1, r2
     154:	22c0      	movs	r2, #192	; 0xc0
     156:	0212      	lsls	r2, r2, #8
     158:	430a      	orrs	r2, r1
     15a:	511a      	str	r2, [r3, r4]
	// Setting NVIC
	NVIC_EnableIRQ(IdNvic);
	NVIC_SetPriority (IdNvic, ((1<<2) - 1));  /* set Priority */ //default value

	//Setting clock
	genClkReg->CLKCTRL.reg_value = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
     15c:	6842      	ldr	r2, [r0, #4]
     15e:	4b06      	ldr	r3, [pc, #24]	; (178 <_ZN8uartPort13initClockNVICEv+0x40>)
     160:	8053      	strh	r3, [r2, #2]
	GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
	GCLK_CLKCTRL_CLKEN ;

	while ( genClkReg->STATUS.reg_value & GCLK_STATUS_SYNCBUSY )
     162:	7853      	ldrb	r3, [r2, #1]
     164:	b25b      	sxtb	r3, r3
     166:	2b00      	cmp	r3, #0
     168:	dbfb      	blt.n	162 <_ZN8uartPort13initClockNVICEv+0x2a>
	{
		/* Wait for synchronization */
		//vNopDelayMS(100);
	}
     16a:	bd10      	pop	{r4, pc}
     16c:	42000800 	.word	0x42000800
     170:	e000e100 	.word	0xe000e100
     174:	ffff00ff 	.word	0xffff00ff
     178:	00004014 	.word	0x00004014

0000017c <_ZN8uartPortC1EP15uartRegisterMap>:
uartPort::uartPort(uartRegisterMap* baseAddr)
     17c:	b570      	push	{r4, r5, r6, lr}
     17e:	0005      	movs	r5, r0
	genClkReg = (GenClockRegMap *)(GCLK);
     180:	4b37      	ldr	r3, [pc, #220]	; (260 <_ZN8uartPortC1EP15uartRegisterMap+0xe4>)
	uartRegisters = baseAddr;
     182:	6001      	str	r1, [r0, #0]
	genClkReg = (GenClockRegMap *)(GCLK);
     184:	6043      	str	r3, [r0, #4]
	initClockNVIC();
     186:	f7ff ffd7 	bl	138 <_ZN8uartPort13initClockNVICEv>
	uartRegisters->CTRLA.bit_data.swrst = 1;
     18a:	2201      	movs	r2, #1
     18c:	682b      	ldr	r3, [r5, #0]
     18e:	6819      	ldr	r1, [r3, #0]
     190:	430a      	orrs	r2, r1
     192:	601a      	str	r2, [r3, #0]
	while(uartRegisters->SYNCBUSY.bit_data.swrst){};
     194:	69d8      	ldr	r0, [r3, #28]
     196:	07c0      	lsls	r0, r0, #31
     198:	0fc0      	lsrs	r0, r0, #31
     19a:	d1fb      	bne.n	194 <_ZN8uartPortC1EP15uartRegisterMap+0x18>
	uartRegisters->CTRLA.bit_data.enable = 0x0;
     19c:	2602      	movs	r6, #2
	pinPeripheral(UART0_RX_PIN_ID,g_APinDescription[UART0_RX_PIN_ID].ulPinType); //rx id 0, { PORTA, 11, PIO_SERCOM, PIN_ATTR_DIGITAL, No_ADC_Channel, NOT_ON_PWM, NOT_ON_TIMER, EXTERNAL_INT_11 }, // RX: SERCOM0/PAD[3]
     19e:	2108      	movs	r1, #8
	uartRegisters->CTRLA.bit_data.enable = 0x0;
     1a0:	681a      	ldr	r2, [r3, #0]
	pinPeripheral(UART0_RX_PIN_ID,g_APinDescription[UART0_RX_PIN_ID].ulPinType); //rx id 0, { PORTA, 11, PIO_SERCOM, PIN_ATTR_DIGITAL, No_ADC_Channel, NOT_ON_PWM, NOT_ON_TIMER, EXTERNAL_INT_11 }, // RX: SERCOM0/PAD[3]
     1a2:	4c30      	ldr	r4, [pc, #192]	; (264 <_ZN8uartPortC1EP15uartRegisterMap+0xe8>)
	uartRegisters->CTRLA.bit_data.enable = 0x0;
     1a4:	43b2      	bics	r2, r6
     1a6:	601a      	str	r2, [r3, #0]
	pinPeripheral(UART0_RX_PIN_ID,g_APinDescription[UART0_RX_PIN_ID].ulPinType); //rx id 0, { PORTA, 11, PIO_SERCOM, PIN_ATTR_DIGITAL, No_ADC_Channel, NOT_ON_PWM, NOT_ON_TIMER, EXTERNAL_INT_11 }, // RX: SERCOM0/PAD[3]
     1a8:	5661      	ldrsb	r1, [r4, r1]
     1aa:	f001 fae9 	bl	1780 <pinPeripheral>
	pinPeripheral(UART0_TX_PIN_ID,g_APinDescription[UART0_TX_PIN_ID].ulPinType); //tx id 1, //{ PORTA, 10, PIO_SERCOM, PIN_ATTR_DIGITAL, No_ADC_Channel, NOT_ON_PWM, NOT_ON_TIMER, EXTERNAL_INT_10 }, // TX: SERCOM0/PAD[2]
     1ae:	211f      	movs	r1, #31
     1b0:	3401      	adds	r4, #1
     1b2:	5661      	ldrsb	r1, [r4, r1]
     1b4:	2001      	movs	r0, #1
     1b6:	f001 fae3 	bl	1780 <pinPeripheral>
	uartRegisters->CTRLA.bit_data.rxpo = UART0_RX_PAD_ID; //sercom0 pad 3
     1ba:	23c0      	movs	r3, #192	; 0xc0
     1bc:	682c      	ldr	r4, [r5, #0]
     1be:	039b      	lsls	r3, r3, #14
     1c0:	6822      	ldr	r2, [r4, #0]
	uint16_t baud = (SystemCoreClock / (16 * 9600)) - 1;   //system clock starts at 1Mhz then after system init is 48Mhz
     1c2:	2196      	movs	r1, #150	; 0x96
	uartRegisters->CTRLA.bit_data.rxpo = UART0_RX_PAD_ID; //sercom0 pad 3
     1c4:	4313      	orrs	r3, r2
     1c6:	6023      	str	r3, [r4, #0]
	uartRegisters->CTRLA.bit_data.txpo = UART0_TX_PAD_ID; //sercom0 pad 2
     1c8:	6823      	ldr	r3, [r4, #0]
     1ca:	4a27      	ldr	r2, [pc, #156]	; (268 <_ZN8uartPortC1EP15uartRegisterMap+0xec>)
	uint16_t baud = (SystemCoreClock / (16 * 9600)) - 1;   //system clock starts at 1Mhz then after system init is 48Mhz
     1cc:	0289      	lsls	r1, r1, #10
	uartRegisters->CTRLA.bit_data.txpo = UART0_TX_PAD_ID; //sercom0 pad 2
     1ce:	401a      	ands	r2, r3
     1d0:	2380      	movs	r3, #128	; 0x80
     1d2:	025b      	lsls	r3, r3, #9
     1d4:	4313      	orrs	r3, r2
     1d6:	6023      	str	r3, [r4, #0]
	uartRegisters->CTRLA.bit_data.sampr = 0x0; //x16 sample rate with arithm baud rate generation
     1d8:	6823      	ldr	r3, [r4, #0]
     1da:	4a24      	ldr	r2, [pc, #144]	; (26c <_ZN8uartPortC1EP15uartRegisterMap+0xf0>)
     1dc:	4013      	ands	r3, r2
     1de:	6023      	str	r3, [r4, #0]
	uint16_t baud = (SystemCoreClock / (16 * 9600)) - 1;   //system clock starts at 1Mhz then after system init is 48Mhz
     1e0:	4b23      	ldr	r3, [pc, #140]	; (270 <_ZN8uartPortC1EP15uartRegisterMap+0xf4>)
     1e2:	6818      	ldr	r0, [r3, #0]
     1e4:	f001 ffda 	bl	219c <__udivsi3>
	uartRegisters->CTRLA.bit_data.mode = 0x1;
     1e8:	221c      	movs	r2, #28
	uint16_t baud = (SystemCoreClock / (16 * 9600)) - 1;   //system clock starts at 1Mhz then after system init is 48Mhz
     1ea:	3801      	subs	r0, #1
     1ec:	b280      	uxth	r0, r0
	uartRegisters->BAUD.reg_value = baud;
     1ee:	81a0      	strh	r0, [r4, #12]
	uartRegisters->CTRLA.bit_data.mode = 0x1;
     1f0:	6823      	ldr	r3, [r4, #0]
     1f2:	4393      	bics	r3, r2
     1f4:	3a18      	subs	r2, #24
     1f6:	4313      	orrs	r3, r2
     1f8:	6023      	str	r3, [r4, #0]
	uartRegisters->INTENSET.bit_data.dre = 1;
     1fa:	2301      	movs	r3, #1
     1fc:	7da1      	ldrb	r1, [r4, #22]
     1fe:	430b      	orrs	r3, r1
     200:	75a3      	strb	r3, [r4, #22]
	uartRegisters->INTENSET.bit_data.rxc = 1;
     202:	7da3      	ldrb	r3, [r4, #22]
     204:	431a      	orrs	r2, r3
     206:	75a2      	strb	r2, [r4, #22]
	uartRegisters->CTRLB.bit_data.chsize = 0x0;
     208:	2207      	movs	r2, #7
	uartRegisters->INTENSET.bit_data.txc = 1;
     20a:	7da3      	ldrb	r3, [r4, #22]
     20c:	431e      	orrs	r6, r3
     20e:	75a6      	strb	r6, [r4, #22]
	uartRegisters->CTRLB.bit_data.chsize = 0x0;
     210:	6863      	ldr	r3, [r4, #4]
     212:	4393      	bics	r3, r2
     214:	6063      	str	r3, [r4, #4]
	uartRegisters->CTRLA.bit_data.dord = 0; //MSB=0
     216:	6823      	ldr	r3, [r4, #0]
     218:	4a16      	ldr	r2, [pc, #88]	; (274 <_ZN8uartPortC1EP15uartRegisterMap+0xf8>)
     21a:	4013      	ands	r3, r2
     21c:	6023      	str	r3, [r4, #0]
	uartRegisters->CTRLB.bit_data.pmode = 0; //0=even 1=odd parity
     21e:	6863      	ldr	r3, [r4, #4]
     220:	4a15      	ldr	r2, [pc, #84]	; (278 <_ZN8uartPortC1EP15uartRegisterMap+0xfc>)
     222:	4013      	ands	r3, r2
	uartRegisters->CTRLB.bit_data.sbmode = 0; //0=1 stop bit  1=2 stop bit
     224:	2240      	movs	r2, #64	; 0x40
	uartRegisters->CTRLB.bit_data.pmode = 0; //0=even 1=odd parity
     226:	6063      	str	r3, [r4, #4]
	uartRegisters->CTRLB.bit_data.sbmode = 0; //0=1 stop bit  1=2 stop bit
     228:	6863      	ldr	r3, [r4, #4]
     22a:	4393      	bics	r3, r2
     22c:	6063      	str	r3, [r4, #4]
	while (uartRegisters->SYNCBUSY.bit_data.enable){};
     22e:	69e3      	ldr	r3, [r4, #28]
     230:	079b      	lsls	r3, r3, #30
     232:	d4fc      	bmi.n	22e <_ZN8uartPortC1EP15uartRegisterMap+0xb2>
	uartRegisters->CTRLA.bit_data.enable = 0x1;
     234:	2302      	movs	r3, #2
     236:	6822      	ldr	r2, [r4, #0]
     238:	4313      	orrs	r3, r2
     23a:	6023      	str	r3, [r4, #0]
	while (uartRegisters->SYNCBUSY.bit_data.enable){};
     23c:	69e3      	ldr	r3, [r4, #28]
     23e:	079b      	lsls	r3, r3, #30
     240:	d4fc      	bmi.n	23c <_ZN8uartPortC1EP15uartRegisterMap+0xc0>
	uartRegisters->CTRLB.bit_data.txen = 1;
     242:	2380      	movs	r3, #128	; 0x80
     244:	6862      	ldr	r2, [r4, #4]
     246:	025b      	lsls	r3, r3, #9
     248:	4313      	orrs	r3, r2
     24a:	6063      	str	r3, [r4, #4]
	uartRegisters->CTRLB.bit_data.rxen = 1;
     24c:	2380      	movs	r3, #128	; 0x80
     24e:	6862      	ldr	r2, [r4, #4]
     250:	029b      	lsls	r3, r3, #10
     252:	4313      	orrs	r3, r2
     254:	6063      	str	r3, [r4, #4]
	while (uartRegisters->SYNCBUSY.bit_data.enable){};
     256:	69e3      	ldr	r3, [r4, #28]
     258:	079b      	lsls	r3, r3, #30
     25a:	d4fc      	bmi.n	256 <_ZN8uartPortC1EP15uartRegisterMap+0xda>
}
     25c:	0028      	movs	r0, r5
     25e:	bd70      	pop	{r4, r5, r6, pc}
     260:	40000c00 	.word	0x40000c00
     264:	0000255c 	.word	0x0000255c
     268:	fffcffff 	.word	0xfffcffff
     26c:	ffff1fff 	.word	0xffff1fff
     270:	2000002c 	.word	0x2000002c
     274:	bfffffff 	.word	0xbfffffff
     278:	ffffdfff 	.word	0xffffdfff

0000027c <setup>:
//**************************************************************************



void setup() 
{
     27c:	b510      	push	{r4, lr}

   uartPort* uart0 = new uartPort(SERIAL0);	
     27e:	2008      	movs	r0, #8
     280:	f000 f894 	bl	3ac <_Znwj>
     284:	0004      	movs	r4, r0
     286:	4906      	ldr	r1, [pc, #24]	; (2a0 <setup+0x24>)
     288:	f7ff ff78 	bl	17c <_ZN8uartPortC1EP15uartRegisterMap>
   uart0->write((uint8_t*)"HELLO", 5);
     28c:	2205      	movs	r2, #5
     28e:	4905      	ldr	r1, [pc, #20]	; (2a4 <setup+0x28>)
     290:	0020      	movs	r0, r4
     292:	f7ff ff3f 	bl	114 <_ZN8uartPort5writeEPhm>
  vNopDelayMS(1000); // prevents usb driver crash on startup, do not omit this
     296:	20fa      	movs	r0, #250	; 0xfa
     298:	0080      	lsls	r0, r0, #2
     29a:	f001 facf 	bl	183c <vNopDelayMS>
  // Also initializes a handler pointer to each task, which are important to communicate with and retrieve info from tasks
 

  // Start the RTOS, this function will never return and will schedule the tasks.
	
}
     29e:	bd10      	pop	{r4, pc}
     2a0:	42000800 	.word	0x42000800
     2a4:	00002504 	.word	0x00002504

000002a8 <loop>:
// No rtos blocking functions allowed!
//*****************************************************************
void loop() 
{
    //uart0->write((uint8_t*)".", 1);
}
     2a8:	4770      	bx	lr

000002aa <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     2aa:	be03      	bkpt	0x0003
     2ac:	e7fe      	b.n	2ac <Dummy_Handler+0x2>
	...

000002b0 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     2b0:	4b03      	ldr	r3, [pc, #12]	; (2c0 <USB_Handler+0x10>)
{
     2b2:	b510      	push	{r4, lr}
  if (usb_isr)
     2b4:	681b      	ldr	r3, [r3, #0]
     2b6:	2b00      	cmp	r3, #0
     2b8:	d000      	beq.n	2bc <USB_Handler+0xc>
    usb_isr();
     2ba:	4798      	blx	r3
}
     2bc:	bd10      	pop	{r4, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	2000011c 	.word	0x2000011c

000002c4 <Reset_Handler>:
{
     2c4:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     2c6:	490f      	ldr	r1, [pc, #60]	; (304 <Reset_Handler+0x40>)
     2c8:	4c0f      	ldr	r4, [pc, #60]	; (308 <Reset_Handler+0x44>)
     2ca:	42a1      	cmp	r1, r4
     2cc:	d104      	bne.n	2d8 <Reset_Handler+0x14>
  SystemInit();
     2ce:	f000 f8bf 	bl	450 <SystemInit>
  main();
     2d2:	f000 f84b 	bl	36c <main>
     2d6:	e7fe      	b.n	2d6 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     2d8:	4d0c      	ldr	r5, [pc, #48]	; (30c <Reset_Handler+0x48>)
     2da:	2300      	movs	r3, #0
     2dc:	428d      	cmp	r5, r1
     2de:	d0f6      	beq.n	2ce <Reset_Handler+0xa>
     2e0:	18ca      	adds	r2, r1, r3
     2e2:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     2e4:	42a2      	cmp	r2, r4
     2e6:	d305      	bcc.n	2f4 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     2e8:	4290      	cmp	r0, r2
     2ea:	d0f0      	beq.n	2ce <Reset_Handler+0xa>
     2ec:	4b08      	ldr	r3, [pc, #32]	; (310 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     2ee:	4909      	ldr	r1, [pc, #36]	; (314 <Reset_Handler+0x50>)
      *pDest = 0;
     2f0:	2200      	movs	r2, #0
     2f2:	e004      	b.n	2fe <Reset_Handler+0x3a>
      *pDest = *pSrc;
     2f4:	6800      	ldr	r0, [r0, #0]
     2f6:	3304      	adds	r3, #4
     2f8:	6010      	str	r0, [r2, #0]
     2fa:	e7f1      	b.n	2e0 <Reset_Handler+0x1c>
      *pDest = 0;
     2fc:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     2fe:	428b      	cmp	r3, r1
     300:	d3fc      	bcc.n	2fc <Reset_Handler+0x38>
     302:	e7e4      	b.n	2ce <Reset_Handler+0xa>
     304:	20000000 	.word	0x20000000
     308:	20000100 	.word	0x20000100
     30c:	00002a38 	.word	0x00002a38
     310:	20000100 	.word	0x20000100
     314:	20000ba8 	.word	0x20000ba8

00000318 <SysTick_Handler>:
{
     318:	b510      	push	{r4, lr}
  if (sysTickHook())
     31a:	f000 f824 	bl	366 <sysTickHook>
     31e:	2800      	cmp	r0, #0
     320:	d101      	bne.n	326 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     322:	f000 f815 	bl	350 <SysTick_DefaultHandler>
}
     326:	bd10      	pop	{r4, pc}

00000328 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     328:	4b01      	ldr	r3, [pc, #4]	; (330 <USB_SetHandler+0x8>)
     32a:	6018      	str	r0, [r3, #0]
}
     32c:	4770      	bx	lr
     32e:	46c0      	nop			; (mov r8, r8)
     330:	2000011c 	.word	0x2000011c

00000334 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
     334:	b570      	push	{r4, r5, r6, lr}
     336:	1e04      	subs	r4, r0, #0
  if ( ms == 0 )
     338:	d007      	beq.n	34a <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
     33a:	4d04      	ldr	r5, [pc, #16]	; (34c <delay+0x18>)
     33c:	682e      	ldr	r6, [r5, #0]

  do
  {
    yield() ;
     33e:	f000 f811 	bl	364 <yield>
  } while ( _ulTickCount - start < ms ) ;
     342:	682b      	ldr	r3, [r5, #0]
     344:	1b9b      	subs	r3, r3, r6
     346:	429c      	cmp	r4, r3
     348:	d8f9      	bhi.n	33e <delay+0xa>
}
     34a:	bd70      	pop	{r4, r5, r6, pc}
     34c:	20000120 	.word	0x20000120

00000350 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     350:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     352:	4a03      	ldr	r2, [pc, #12]	; (360 <SysTick_DefaultHandler+0x10>)
     354:	6813      	ldr	r3, [r2, #0]
     356:	3301      	adds	r3, #1
     358:	6013      	str	r3, [r2, #0]
  tickReset();
     35a:	f000 f83d 	bl	3d8 <tickReset>
}
     35e:	bd10      	pop	{r4, pc}
     360:	20000120 	.word	0x20000120

00000364 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     364:	4770      	bx	lr

00000366 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     366:	2000      	movs	r0, #0
     368:	4770      	bx	lr

0000036a <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     36a:	4770      	bx	lr

0000036c <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     36c:	b510      	push	{r4, lr}
  init();
     36e:	f001 f8e5 	bl	153c <init>

  __libc_init_array();
     372:	f001 ff9f 	bl	22b4 <__libc_init_array>

  initVariant();
     376:	f7ff fff8 	bl	36a <_Z11initVariantv>

  delay(1);
     37a:	2001      	movs	r0, #1
     37c:	f7ff ffda 	bl	334 <delay>
#if defined(USBCON)
  USBDevice.init();
     380:	4c08      	ldr	r4, [pc, #32]	; (3a4 <main+0x38>)
     382:	0020      	movs	r0, r4
     384:	f000 fb68 	bl	a58 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     388:	0020      	movs	r0, r4
     38a:	f000 fbdd 	bl	b48 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     38e:	f7ff ff75 	bl	27c <setup>

  for (;;)
  {
    loop();
     392:	f7ff ff89 	bl	2a8 <loop>
    if (serialEventRun) serialEventRun();
     396:	4b04      	ldr	r3, [pc, #16]	; (3a8 <main+0x3c>)
     398:	2b00      	cmp	r3, #0
     39a:	d0fa      	beq.n	392 <main+0x26>
     39c:	e000      	b.n	3a0 <main+0x34>
     39e:	bf00      	nop
     3a0:	e7f7      	b.n	392 <main+0x26>
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	20000124 	.word	0x20000124
     3a8:	00000000 	.word	0x00000000

000003ac <_Znwj>:
     3ac:	b510      	push	{r4, lr}
     3ae:	f001 ffa5 	bl	22fc <malloc>
     3b2:	bd10      	pop	{r4, pc}

000003b4 <_ZdlPv>:
     3b4:	b510      	push	{r4, lr}
     3b6:	f001 ffab 	bl	2310 <free>
     3ba:	bd10      	pop	{r4, pc}

000003bc <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
     3bc:	4b01      	ldr	r3, [pc, #4]	; (3c4 <initiateReset+0x8>)
     3be:	6018      	str	r0, [r3, #0]
}
     3c0:	4770      	bx	lr
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	20000000 	.word	0x20000000

000003c8 <cancelReset>:

void cancelReset() {
	ticks = -1;
     3c8:	2201      	movs	r2, #1
     3ca:	4b02      	ldr	r3, [pc, #8]	; (3d4 <cancelReset+0xc>)
     3cc:	4252      	negs	r2, r2
     3ce:	601a      	str	r2, [r3, #0]
}
     3d0:	4770      	bx	lr
     3d2:	46c0      	nop			; (mov r8, r8)
     3d4:	20000000 	.word	0x20000000

000003d8 <tickReset>:

void tickReset() {
	if (ticks == -1)
     3d8:	4a16      	ldr	r2, [pc, #88]	; (434 <tickReset+0x5c>)
void tickReset() {
     3da:	b510      	push	{r4, lr}
	if (ticks == -1)
     3dc:	6813      	ldr	r3, [r2, #0]
     3de:	1c59      	adds	r1, r3, #1
     3e0:	d027      	beq.n	432 <tickReset+0x5a>
		return;
	ticks--;
     3e2:	3b01      	subs	r3, #1
     3e4:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     3e6:	2b00      	cmp	r3, #0
     3e8:	d123      	bne.n	432 <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     3ea:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     3ec:	4b12      	ldr	r3, [pc, #72]	; (438 <tickReset+0x60>)
     3ee:	4a13      	ldr	r2, [pc, #76]	; (43c <tickReset+0x64>)
     3f0:	3304      	adds	r3, #4
     3f2:	4293      	cmp	r3, r2
     3f4:	d808      	bhi.n	408 <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     3f6:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     3fa:	4a11      	ldr	r2, [pc, #68]	; (440 <tickReset+0x68>)
     3fc:	4b11      	ldr	r3, [pc, #68]	; (444 <tickReset+0x6c>)
     3fe:	60da      	str	r2, [r3, #12]
     400:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     404:	46c0      	nop			; (mov r8, r8)
     406:	e7fd      	b.n	404 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     408:	4a0f      	ldr	r2, [pc, #60]	; (448 <tickReset+0x70>)
	while (!nvmReady())
     40a:	2101      	movs	r1, #1
     40c:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     40e:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     410:	420c      	tst	r4, r1
     412:	d0fc      	beq.n	40e <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     414:	2120      	movs	r1, #32
     416:	8b14      	ldrh	r4, [r2, #24]
     418:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     41a:	089b      	lsrs	r3, r3, #2
     41c:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     41e:	4321      	orrs	r1, r4
     420:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     422:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     424:	4b09      	ldr	r3, [pc, #36]	; (44c <tickReset+0x74>)
     426:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     428:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     42a:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     42c:	421a      	tst	r2, r3
     42e:	d0fc      	beq.n	42a <tickReset+0x52>
     430:	e7e1      	b.n	3f6 <tickReset+0x1e>
		banzai();
}
     432:	bd10      	pop	{r4, pc}
     434:	20000000 	.word	0x20000000
     438:	00000000 	.word	0x00000000
     43c:	00000203 	.word	0x00000203
     440:	05fa0004 	.word	0x05fa0004
     444:	e000ed00 	.word	0xe000ed00
     448:	41004000 	.word	0x41004000
     44c:	ffffa502 	.word	0xffffa502

00000450 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     450:	221e      	movs	r2, #30
{
     452:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     454:	4846      	ldr	r0, [pc, #280]	; (570 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     456:	4947      	ldr	r1, [pc, #284]	; (574 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     458:	6843      	ldr	r3, [r0, #4]
     45a:	4393      	bics	r3, r2
     45c:	3a1c      	subs	r2, #28
     45e:	4313      	orrs	r3, r2
     460:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     462:	2308      	movs	r3, #8
     464:	698c      	ldr	r4, [r1, #24]
     466:	4323      	orrs	r3, r4
     468:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     46a:	4c43      	ldr	r4, [pc, #268]	; (578 <SystemInit+0x128>)
     46c:	4b43      	ldr	r3, [pc, #268]	; (57c <SystemInit+0x12c>)
     46e:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     470:	8a9c      	ldrh	r4, [r3, #20]
     472:	4314      	orrs	r4, r2
     474:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     476:	68dc      	ldr	r4, [r3, #12]
     478:	4214      	tst	r4, r2
     47a:	d0fc      	beq.n	476 <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     47c:	2401      	movs	r4, #1
     47e:	4a40      	ldr	r2, [pc, #256]	; (580 <SystemInit+0x130>)
     480:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     482:	7815      	ldrb	r5, [r2, #0]
     484:	4225      	tst	r5, r4
     486:	d003      	beq.n	490 <SystemInit+0x40>
     488:	7855      	ldrb	r5, [r2, #1]
     48a:	b26d      	sxtb	r5, r5
     48c:	2d00      	cmp	r5, #0
     48e:	dbf8      	blt.n	482 <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     490:	2401      	movs	r4, #1
     492:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     494:	7854      	ldrb	r4, [r2, #1]
     496:	b264      	sxtb	r4, r4
     498:	2c00      	cmp	r4, #0
     49a:	dbfb      	blt.n	494 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     49c:	4c39      	ldr	r4, [pc, #228]	; (584 <SystemInit+0x134>)
     49e:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     4a0:	7854      	ldrb	r4, [r2, #1]
     4a2:	b264      	sxtb	r4, r4
     4a4:	2c00      	cmp	r4, #0
     4a6:	dbfb      	blt.n	4a0 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     4a8:	2482      	movs	r4, #130	; 0x82
     4aa:	01e4      	lsls	r4, r4, #7
     4ac:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     4ae:	7854      	ldrb	r4, [r2, #1]
     4b0:	b264      	sxtb	r4, r4
     4b2:	2c00      	cmp	r4, #0
     4b4:	dbfb      	blt.n	4ae <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     4b6:	2402      	movs	r4, #2
     4b8:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     4ba:	340e      	adds	r4, #14
     4bc:	68dd      	ldr	r5, [r3, #12]
     4be:	4225      	tst	r5, r4
     4c0:	d0fc      	beq.n	4bc <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     4c2:	4c31      	ldr	r4, [pc, #196]	; (588 <SystemInit+0x138>)
     4c4:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     4c6:	2410      	movs	r4, #16
     4c8:	68dd      	ldr	r5, [r3, #12]
     4ca:	4225      	tst	r5, r4
     4cc:	d0fc      	beq.n	4c8 <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     4ce:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     4d0:	4c2e      	ldr	r4, [pc, #184]	; (58c <SystemInit+0x13c>)
     4d2:	432c      	orrs	r4, r5
     4d4:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     4d6:	2410      	movs	r4, #16
     4d8:	68dd      	ldr	r5, [r3, #12]
     4da:	4225      	tst	r5, r4
     4dc:	d0fc      	beq.n	4d8 <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     4de:	2402      	movs	r4, #2
     4e0:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     4e2:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     4e4:	432c      	orrs	r4, r5
     4e6:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     4e8:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     4ea:	68dd      	ldr	r5, [r3, #12]
     4ec:	4235      	tst	r5, r6
     4ee:	d0fc      	beq.n	4ea <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     4f0:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     4f2:	4225      	tst	r5, r4
     4f4:	d0f9      	beq.n	4ea <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     4f6:	2410      	movs	r4, #16
     4f8:	68dd      	ldr	r5, [r3, #12]
     4fa:	4225      	tst	r5, r4
     4fc:	d0fc      	beq.n	4f8 <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     4fe:	2400      	movs	r4, #0
     500:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     502:	7854      	ldrb	r4, [r2, #1]
     504:	b264      	sxtb	r4, r4
     506:	2c00      	cmp	r4, #0
     508:	dbfb      	blt.n	502 <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     50a:	4c21      	ldr	r4, [pc, #132]	; (590 <SystemInit+0x140>)
     50c:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     50e:	7854      	ldrb	r4, [r2, #1]
     510:	b264      	sxtb	r4, r4
     512:	2c00      	cmp	r4, #0
     514:	dbfb      	blt.n	50e <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     516:	6a1c      	ldr	r4, [r3, #32]
     518:	4d1e      	ldr	r5, [pc, #120]	; (594 <SystemInit+0x144>)
     51a:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     51c:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     51e:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     520:	6a1c      	ldr	r4, [r3, #32]
     522:	43ac      	bics	r4, r5
     524:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     526:	2303      	movs	r3, #3
     528:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     52a:	4b1b      	ldr	r3, [pc, #108]	; (598 <SystemInit+0x148>)
     52c:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     52e:	7853      	ldrb	r3, [r2, #1]
     530:	b25b      	sxtb	r3, r3
     532:	2b00      	cmp	r3, #0
     534:	dbfb      	blt.n	52e <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     536:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     538:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     53a:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     53c:	4a17      	ldr	r2, [pc, #92]	; (59c <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     53e:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     540:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     542:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     544:	4b16      	ldr	r3, [pc, #88]	; (5a0 <SystemInit+0x150>)
     546:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     548:	4b16      	ldr	r3, [pc, #88]	; (5a4 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     54a:	4a17      	ldr	r2, [pc, #92]	; (5a8 <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     54c:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     54e:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     550:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     552:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     554:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     556:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     558:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     55a:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     55c:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     55e:	4313      	orrs	r3, r2
     560:	4a12      	ldr	r2, [pc, #72]	; (5ac <SystemInit+0x15c>)
     562:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     564:	2380      	movs	r3, #128	; 0x80
     566:	6842      	ldr	r2, [r0, #4]
     568:	4313      	orrs	r3, r2
     56a:	6043      	str	r3, [r0, #4]
}
     56c:	bd70      	pop	{r4, r5, r6, pc}
     56e:	46c0      	nop			; (mov r8, r8)
     570:	41004000 	.word	0x41004000
     574:	40000400 	.word	0x40000400
     578:	0000060c 	.word	0x0000060c
     57c:	40000800 	.word	0x40000800
     580:	40000c00 	.word	0x40000c00
     584:	00010501 	.word	0x00010501
     588:	7dff05b9 	.word	0x7dff05b9
     58c:	00000a04 	.word	0x00000a04
     590:	00030700 	.word	0x00030700
     594:	fffffcff 	.word	0xfffffcff
     598:	00010603 	.word	0x00010603
     59c:	02dc6c00 	.word	0x02dc6c00
     5a0:	2000002c 	.word	0x2000002c
     5a4:	00806024 	.word	0x00806024
     5a8:	00806020 	.word	0x00806020
     5ac:	42004000 	.word	0x42004000

000005b0 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
     5b0:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
     5b2:	250f      	movs	r5, #15
     5b4:	1dcb      	adds	r3, r1, #7
     5b6:	3901      	subs	r1, #1
     5b8:	0002      	movs	r2, r0
     5ba:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     5bc:	0014      	movs	r4, r2
		val = (val >> 4);
     5be:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     5c0:	3430      	adds	r4, #48	; 0x30
     5c2:	2a09      	cmp	r2, #9
     5c4:	dd01      	ble.n	5ca <_ZL5utox8mPc+0x1a>
     5c6:	3237      	adds	r2, #55	; 0x37
     5c8:	0014      	movs	r4, r2
     5ca:	701c      	strb	r4, [r3, #0]
     5cc:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
     5ce:	428b      	cmp	r3, r1
     5d0:	d1f2      	bne.n	5b8 <_ZL5utox8mPc+0x8>
	}
}
     5d2:	bd30      	pop	{r4, r5, pc}

000005d4 <_ZN26DoubleBufferedEPOutHandlerD1Ev>:
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
	}

	virtual ~DoubleBufferedEPOutHandler() {
     5d4:	b510      	push	{r4, lr}
     5d6:	0004      	movs	r4, r0
		free((void*)data0);
     5d8:	6980      	ldr	r0, [r0, #24]
     5da:	f001 fe99 	bl	2310 <free>
		free((void*)data1);
     5de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     5e0:	f001 fe96 	bl	2310 <free>
	}
     5e4:	0020      	movs	r0, r4
     5e6:	bd10      	pop	{r4, pc}

000005e8 <_ZN26DoubleBufferedEPOutHandlerD0Ev>:
	virtual ~DoubleBufferedEPOutHandler() {
     5e8:	b510      	push	{r4, lr}
     5ea:	0004      	movs	r4, r0
	}
     5ec:	f7ff fff2 	bl	5d4 <_ZN26DoubleBufferedEPOutHandlerD1Ev>
     5f0:	0020      	movs	r0, r4
     5f2:	f7ff fedf 	bl	3b4 <_ZdlPv>
     5f6:	0020      	movs	r0, r4
     5f8:	bd10      	pop	{r4, pc}
	...

000005fc <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     5fc:	b570      	push	{r4, r5, r6, lr}
		if (epHandlers[ep] != NULL) {
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
		}
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     5fe:	2982      	cmp	r1, #130	; 0x82
     600:	d11f      	bne.n	642 <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     602:	b2c3      	uxtb	r3, r0
     604:	4d2c      	ldr	r5, [pc, #176]	; (6b8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
     606:	015a      	lsls	r2, r3, #5
     608:	18aa      	adds	r2, r5, r2
     60a:	6991      	ldr	r1, [r2, #24]
     60c:	4c2b      	ldr	r4, [pc, #172]	; (6bc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     60e:	0180      	lsls	r0, r0, #6
     610:	400c      	ands	r4, r1
     612:	21c0      	movs	r1, #192	; 0xc0
     614:	0589      	lsls	r1, r1, #22
     616:	4321      	orrs	r1, r4
     618:	6191      	str	r1, [r2, #24]
     61a:	4929      	ldr	r1, [pc, #164]	; (6c0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     61c:	3308      	adds	r3, #8
     61e:	1808      	adds	r0, r1, r0
     620:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     622:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     624:	682a      	ldr	r2, [r5, #0]
     626:	015b      	lsls	r3, r3, #5
     628:	18d0      	adds	r0, r2, r3
     62a:	7904      	ldrb	r4, [r0, #4]
     62c:	4249      	negs	r1, r1
     62e:	4321      	orrs	r1, r4
     630:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     632:	2070      	movs	r0, #112	; 0x70
     634:	5c99      	ldrb	r1, [r3, r2]
     636:	4381      	bics	r1, r0
     638:	0008      	movs	r0, r1
     63a:	2130      	movs	r1, #48	; 0x30
     63c:	4301      	orrs	r1, r0
     63e:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
     640:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
     642:	2900      	cmp	r1, #0
     644:	d1fc      	bne.n	640 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     646:	24c0      	movs	r4, #192	; 0xc0
     648:	b2c1      	uxtb	r1, r0
     64a:	4e1b      	ldr	r6, [pc, #108]	; (6b8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
     64c:	014b      	lsls	r3, r1, #5
     64e:	18f3      	adds	r3, r6, r3
     650:	689a      	ldr	r2, [r3, #8]
     652:	4d1a      	ldr	r5, [pc, #104]	; (6bc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
     654:	05a4      	lsls	r4, r4, #22
     656:	402a      	ands	r2, r5
     658:	4322      	orrs	r2, r4
     65a:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     65c:	4a19      	ldr	r2, [pc, #100]	; (6c4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
     65e:	0180      	lsls	r0, r0, #6
     660:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     662:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     664:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     666:	6830      	ldr	r0, [r6, #0]
     668:	2607      	movs	r6, #7
     66a:	3208      	adds	r2, #8
     66c:	0152      	lsls	r2, r2, #5
     66e:	5c11      	ldrb	r1, [r2, r0]
     670:	43b1      	bics	r1, r6
     672:	000e      	movs	r6, r1
     674:	2101      	movs	r1, #1
     676:	4331      	orrs	r1, r6
     678:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     67a:	6999      	ldr	r1, [r3, #24]
     67c:	400d      	ands	r5, r1
     67e:	432c      	orrs	r4, r5
     680:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     682:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     684:	490e      	ldr	r1, [pc, #56]	; (6c0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
     686:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     688:	5c11      	ldrb	r1, [r2, r0]
     68a:	43a1      	bics	r1, r4
     68c:	000c      	movs	r4, r1
     68e:	2110      	movs	r1, #16
     690:	4321      	orrs	r1, r4
     692:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     694:	6899      	ldr	r1, [r3, #8]
     696:	4c0c      	ldr	r4, [pc, #48]	; (6c8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     698:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     69a:	400c      	ands	r4, r1
     69c:	2180      	movs	r1, #128	; 0x80
     69e:	0349      	lsls	r1, r1, #13
     6a0:	4321      	orrs	r1, r4
     6a2:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     6a4:	6899      	ldr	r1, [r3, #8]
     6a6:	0b89      	lsrs	r1, r1, #14
     6a8:	0389      	lsls	r1, r1, #14
     6aa:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     6ac:	2340      	movs	r3, #64	; 0x40
     6ae:	7951      	ldrb	r1, [r2, #5]
     6b0:	430b      	orrs	r3, r1
     6b2:	7153      	strb	r3, [r2, #5]
     6b4:	e7c4      	b.n	640 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	200005dc 	.word	0x200005dc
     6bc:	8fffffff 	.word	0x8fffffff
     6c0:	20000150 	.word	0x20000150
     6c4:	20000310 	.word	0x20000310
     6c8:	f0003fff 	.word	0xf0003fff

000006cc <_ZN20USBDevice_SAMD21G18x5resetEv>:
void USBDevice_SAMD21G18x::reset() {
     6cc:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
     6ce:	0004      	movs	r4, r0
     6d0:	2301      	movs	r3, #1
     6d2:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
     6d4:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
     6d6:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
     6d8:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
     6da:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
     6dc:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
     6de:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
     6e0:	0052      	lsls	r2, r2, #1
     6e2:	f001 fe28 	bl	2336 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
     6e6:	78ab      	ldrb	r3, [r5, #2]
     6e8:	07db      	lsls	r3, r3, #31
     6ea:	d4fc      	bmi.n	6e6 <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
     6ec:	626c      	str	r4, [r5, #36]	; 0x24
}
     6ee:	bd70      	pop	{r4, r5, r6, pc}

000006f0 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     6f0:	221f      	movs	r2, #31
     6f2:	4b14      	ldr	r3, [pc, #80]	; (744 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
     6f4:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     6f6:	681b      	ldr	r3, [r3, #0]
     6f8:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     6fa:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     6fc:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     6fe:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     700:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     702:	4022      	ands	r2, r4
	if (pad_transn == 0x1F)  // maximum value (31)
     704:	291f      	cmp	r1, #31
     706:	d100      	bne.n	70a <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
     708:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
     70a:	2a1f      	cmp	r2, #31
     70c:	d100      	bne.n	710 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
     70e:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
     710:	2b07      	cmp	r3, #7
     712:	d100      	bne.n	716 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
     714:	3b04      	subs	r3, #4
	usb.PADCAL.bit.TRANSN = pad_transn;
     716:	251f      	movs	r5, #31
     718:	6800      	ldr	r0, [r0, #0]
     71a:	018e      	lsls	r6, r1, #6
     71c:	8d04      	ldrh	r4, [r0, #40]	; 0x28
     71e:	490a      	ldr	r1, [pc, #40]	; (748 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
     720:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
     722:	4021      	ands	r1, r4
     724:	4331      	orrs	r1, r6
     726:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
     728:	8d01      	ldrh	r1, [r0, #40]	; 0x28
     72a:	0014      	movs	r4, r2
     72c:	000a      	movs	r2, r1
     72e:	43aa      	bics	r2, r5
     730:	4322      	orrs	r2, r4
     732:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
     734:	8d02      	ldrh	r2, [r0, #40]	; 0x28
     736:	0319      	lsls	r1, r3, #12
     738:	4b04      	ldr	r3, [pc, #16]	; (74c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
     73a:	4013      	ands	r3, r2
     73c:	430b      	orrs	r3, r1
     73e:	8503      	strh	r3, [r0, #40]	; 0x28
}
     740:	bd70      	pop	{r4, r5, r6, pc}
     742:	46c0      	nop			; (mov r8, r8)
     744:	00806024 	.word	0x00806024
     748:	fffff83f 	.word	0xfffff83f
     74c:	ffff8fff 	.word	0xffff8fff

00000750 <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     750:	f3ef 8310 	mrs	r3, PRIMASK
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     754:	6003      	str	r3, [r0, #0]
     756:	2301      	movs	r3, #1
     758:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     75a:	b672      	cpsid	i
	}
     75c:	4770      	bx	lr

0000075e <_ZN7__GuardD1Ev>:
		if (primask == 0) {
     75e:	6803      	ldr	r3, [r0, #0]
     760:	2b00      	cmp	r3, #0
     762:	d102      	bne.n	76a <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
     764:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
     766:	f3bf 8f6f 	isb	sy
	}
     76a:	4770      	bx	lr

0000076c <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
     76c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
     76e:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
     770:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
     772:	4668      	mov	r0, sp
		if (current == 0) {
     774:	2d00      	cmp	r5, #0
     776:	d114      	bne.n	7a2 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
     778:	f7ff ffea 	bl	750 <_ZN7__GuardC1Ev>
     77c:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
     77e:	1d62      	adds	r2, r4, #5
			synchronized {
     780:	3b01      	subs	r3, #1
     782:	d302      	bcc.n	78a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
     784:	7fd5      	ldrb	r5, [r2, #31]
     786:	b2ed      	uxtb	r5, r5
     788:	e7fa      	b.n	780 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
     78a:	4668      	mov	r0, sp
     78c:	9301      	str	r3, [sp, #4]
     78e:	f7ff ffe6 	bl	75e <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
     792:	2d00      	cmp	r5, #0
     794:	d101      	bne.n	79a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
     796:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
     798:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
     79a:	6a20      	ldr	r0, [r4, #32]
     79c:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
     79e:	1ac0      	subs	r0, r0, r3
     7a0:	e7fa      	b.n	798 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
     7a2:	f7ff ffd5 	bl	750 <_ZN7__GuardC1Ev>
				ready = ready1;
     7a6:	0022      	movs	r2, r4
			bool ready = false;
     7a8:	2500      	movs	r5, #0
     7aa:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
     7ac:	3234      	adds	r2, #52	; 0x34
			synchronized {
     7ae:	3b01      	subs	r3, #1
     7b0:	d302      	bcc.n	7b8 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
     7b2:	7815      	ldrb	r5, [r2, #0]
     7b4:	b2ed      	uxtb	r5, r5
			synchronized {
     7b6:	e7fa      	b.n	7ae <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
     7b8:	4668      	mov	r0, sp
     7ba:	9301      	str	r3, [sp, #4]
     7bc:	f7ff ffcf 	bl	75e <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
     7c0:	2d00      	cmp	r5, #0
     7c2:	d0e8      	beq.n	796 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
     7c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
     7c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     7c8:	e7e9      	b.n	79e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

000007cc <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
     7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     7ce:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
     7d0:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     7d2:	7a03      	ldrb	r3, [r0, #8]
     7d4:	6831      	ldr	r1, [r6, #0]
     7d6:	015a      	lsls	r2, r3, #5
     7d8:	188c      	adds	r4, r1, r2
     7da:	34ff      	adds	r4, #255	; 0xff
     7dc:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     7de:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     7e0:	433d      	orrs	r5, r7
     7e2:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
     7e4:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     7e6:	4d09      	ldr	r5, [pc, #36]	; (80c <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
     7e8:	6890      	ldr	r0, [r2, #8]
     7ea:	04a4      	lsls	r4, r4, #18
     7ec:	4028      	ands	r0, r5
     7ee:	0924      	lsrs	r4, r4, #4
     7f0:	4320      	orrs	r0, r4
     7f2:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     7f4:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     7f6:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     7f8:	0b80      	lsrs	r0, r0, #14
     7fa:	0380      	lsls	r0, r0, #14
     7fc:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     7fe:	2240      	movs	r2, #64	; 0x40
     800:	015b      	lsls	r3, r3, #5
     802:	18cb      	adds	r3, r1, r3
     804:	7919      	ldrb	r1, [r3, #4]
     806:	430a      	orrs	r2, r1
     808:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
     80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     80c:	f0003fff 	.word	0xf0003fff

00000810 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
     810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
     812:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
     814:	0004      	movs	r4, r0
     816:	000e      	movs	r6, r1
     818:	0017      	movs	r7, r2
			synchronized {
     81a:	4668      	mov	r0, sp
		if (current == 0) {
     81c:	2b00      	cmp	r3, #0
     81e:	d13d      	bne.n	89c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
     820:	f7ff ff96 	bl	750 <_ZN7__GuardC1Ev>
     824:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
     826:	1d61      	adds	r1, r4, #5
     828:	3b01      	subs	r3, #1
			synchronized {
     82a:	1c5a      	adds	r2, r3, #1
     82c:	d00c      	beq.n	848 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
     82e:	7fcd      	ldrb	r5, [r1, #31]
     830:	1e5a      	subs	r2, r3, #1
     832:	b2ed      	uxtb	r5, r5
     834:	2d00      	cmp	r5, #0
     836:	d105      	bne.n	844 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
     838:	4668      	mov	r0, sp
     83a:	9301      	str	r3, [sp, #4]
     83c:	f7ff ff8f 	bl	75e <_ZN7__GuardD1Ev>
	}
     840:	0028      	movs	r0, r5
     842:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     844:	0013      	movs	r3, r2
     846:	e7f0      	b.n	82a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
     848:	4668      	mov	r0, sp
     84a:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
     84c:	2500      	movs	r5, #0
			synchronized {
     84e:	f7ff ff86 	bl	75e <_ZN7__GuardD1Ev>
     852:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
     854:	42af      	cmp	r7, r5
     856:	d002      	beq.n	85e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
     858:	6a22      	ldr	r2, [r4, #32]
     85a:	4293      	cmp	r3, r2
     85c:	d357      	bcc.n	90e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
     85e:	6a22      	ldr	r2, [r4, #32]
     860:	4293      	cmp	r3, r2
     862:	d1ed      	bne.n	840 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
     864:	2300      	movs	r3, #0
     866:	61e3      	str	r3, [r4, #28]
				current = 1;
     868:	3301      	adds	r3, #1
     86a:	6123      	str	r3, [r4, #16]
				synchronized {
     86c:	4668      	mov	r0, sp
     86e:	f7ff ff6f 	bl	750 <_ZN7__GuardC1Ev>
					if (notify) {
     872:	0022      	movs	r2, r4
					ready0 = false;
     874:	2100      	movs	r1, #0
     876:	9b01      	ldr	r3, [sp, #4]
     878:	1d67      	adds	r7, r4, #5
     87a:	3b01      	subs	r3, #1
					if (notify) {
     87c:	3235      	adds	r2, #53	; 0x35
				synchronized {
     87e:	1c58      	adds	r0, r3, #1
     880:	d0da      	beq.n	838 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
     882:	77f9      	strb	r1, [r7, #31]
					if (notify) {
     884:	7810      	ldrb	r0, [r2, #0]
     886:	1e5e      	subs	r6, r3, #1
     888:	2800      	cmp	r0, #0
     88a:	d005      	beq.n	898 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
     88c:	7011      	strb	r1, [r2, #0]
						release();
     88e:	0020      	movs	r0, r4
     890:	9301      	str	r3, [sp, #4]
     892:	f7ff ff9b 	bl	7cc <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     896:	e7ec      	b.n	872 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
     898:	0033      	movs	r3, r6
     89a:	e7f0      	b.n	87e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
     89c:	f7ff ff58 	bl	750 <_ZN7__GuardC1Ev>
				if (!ready1) {
     8a0:	0021      	movs	r1, r4
     8a2:	9b01      	ldr	r3, [sp, #4]
     8a4:	3134      	adds	r1, #52	; 0x34
     8a6:	3b01      	subs	r3, #1
			synchronized {
     8a8:	1c5a      	adds	r2, r3, #1
     8aa:	d006      	beq.n	8ba <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
     8ac:	780d      	ldrb	r5, [r1, #0]
     8ae:	1e5a      	subs	r2, r3, #1
     8b0:	b2ed      	uxtb	r5, r5
     8b2:	2d00      	cmp	r5, #0
     8b4:	d0c0      	beq.n	838 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
     8b6:	0013      	movs	r3, r2
     8b8:	e7f6      	b.n	8a8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
     8ba:	4668      	mov	r0, sp
     8bc:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
     8be:	2500      	movs	r5, #0
			synchronized {
     8c0:	f7ff ff4d 	bl	75e <_ZN7__GuardD1Ev>
     8c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
     8c6:	42bd      	cmp	r5, r7
     8c8:	d002      	beq.n	8d0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
     8ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
     8cc:	4293      	cmp	r3, r2
     8ce:	d326      	bcc.n	91e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
     8d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
     8d2:	4293      	cmp	r3, r2
     8d4:	d1b4      	bne.n	840 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
     8d6:	2300      	movs	r3, #0
				synchronized {
     8d8:	4668      	mov	r0, sp
				first1 = 0;
     8da:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
     8dc:	6123      	str	r3, [r4, #16]
				synchronized {
     8de:	f7ff ff37 	bl	750 <_ZN7__GuardC1Ev>
					ready1 = false;
     8e2:	0027      	movs	r7, r4
					if (notify) {
     8e4:	0022      	movs	r2, r4
					ready1 = false;
     8e6:	2100      	movs	r1, #0
     8e8:	9b01      	ldr	r3, [sp, #4]
     8ea:	3734      	adds	r7, #52	; 0x34
     8ec:	3b01      	subs	r3, #1
					if (notify) {
     8ee:	3235      	adds	r2, #53	; 0x35
				synchronized {
     8f0:	1c58      	adds	r0, r3, #1
     8f2:	d0a1      	beq.n	838 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
     8f4:	7039      	strb	r1, [r7, #0]
					if (notify) {
     8f6:	7810      	ldrb	r0, [r2, #0]
     8f8:	1e5e      	subs	r6, r3, #1
     8fa:	2800      	cmp	r0, #0
     8fc:	d005      	beq.n	90a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
     8fe:	7011      	strb	r1, [r2, #0]
						release();
     900:	0020      	movs	r0, r4
     902:	9301      	str	r3, [sp, #4]
     904:	f7ff ff62 	bl	7cc <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     908:	e7eb      	b.n	8e2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
     90a:	0033      	movs	r3, r6
     90c:	e7f0      	b.n	8f0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
     90e:	1c5a      	adds	r2, r3, #1
     910:	61e2      	str	r2, [r4, #28]
     912:	69a2      	ldr	r2, [r4, #24]
     914:	18d3      	adds	r3, r2, r3
     916:	781b      	ldrb	r3, [r3, #0]
     918:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
     91a:	3501      	adds	r5, #1
     91c:	e799      	b.n	852 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
     91e:	1c5a      	adds	r2, r3, #1
     920:	62e2      	str	r2, [r4, #44]	; 0x2c
     922:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     924:	18d3      	adds	r3, r2, r3
     926:	781b      	ldrb	r3, [r3, #0]
     928:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
     92a:	3501      	adds	r5, #1
     92c:	e7ca      	b.n	8c4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

0000092e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
     92e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     930:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
     932:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     934:	0011      	movs	r1, r2
	virtual void handleEndpoint()
     936:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     938:	3108      	adds	r1, #8
     93a:	6818      	ldr	r0, [r3, #0]
     93c:	0149      	lsls	r1, r1, #5
     93e:	1841      	adds	r1, r0, r1
     940:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
     942:	07c0      	lsls	r0, r0, #31
     944:	d527      	bpl.n	996 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     946:	2501      	movs	r5, #1
     948:	0152      	lsls	r2, r2, #5
     94a:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     94c:	189b      	adds	r3, r3, r2
     94e:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
     950:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     952:	0492      	lsls	r2, r2, #18
     954:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
     956:	2900      	cmp	r1, #0
     958:	d121      	bne.n	99e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
     95a:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
     95c:	6a22      	ldr	r2, [r4, #32]
     95e:	2a00      	cmp	r2, #0
     960:	d03e      	beq.n	9e0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     962:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
     964:	6165      	str	r5, [r4, #20]
					synchronized {
     966:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     968:	605a      	str	r2, [r3, #4]
					synchronized {
     96a:	f7ff fef1 	bl	750 <_ZN7__GuardC1Ev>
						if (ready1) {
     96e:	0027      	movs	r7, r4
     970:	0021      	movs	r1, r4
     972:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
     974:	1d66      	adds	r6, r4, #5
     976:	3b01      	subs	r3, #1
						if (ready1) {
     978:	3734      	adds	r7, #52	; 0x34
     97a:	3135      	adds	r1, #53	; 0x35
					synchronized {
     97c:	1c5a      	adds	r2, r3, #1
     97e:	d02b      	beq.n	9d8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
     980:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
     982:	783a      	ldrb	r2, [r7, #0]
     984:	1e58      	subs	r0, r3, #1
     986:	b2d2      	uxtb	r2, r2
     988:	2a00      	cmp	r2, #0
     98a:	d005      	beq.n	998 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
     98c:	9301      	str	r3, [sp, #4]
							return;
     98e:	4668      	mov	r0, sp
							notify = true;
     990:	700d      	strb	r5, [r1, #0]
							return;
     992:	f7ff fee4 	bl	75e <_ZN7__GuardD1Ev>
	}
     996:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
     998:	700a      	strb	r2, [r1, #0]
					synchronized {
     99a:	0003      	movs	r3, r0
     99c:	e7ee      	b.n	97c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
     99e:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
     9a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
     9a2:	2a00      	cmp	r2, #0
     9a4:	d01c      	beq.n	9e0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
     9a6:	2200      	movs	r2, #0
     9a8:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     9aa:	69a2      	ldr	r2, [r4, #24]
					synchronized {
     9ac:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     9ae:	605a      	str	r2, [r3, #4]
					synchronized {
     9b0:	f7ff fece 	bl	750 <_ZN7__GuardC1Ev>
						ready1 = true;
     9b4:	0026      	movs	r6, r4
     9b6:	0021      	movs	r1, r4
     9b8:	9b01      	ldr	r3, [sp, #4]
     9ba:	3634      	adds	r6, #52	; 0x34
     9bc:	3b01      	subs	r3, #1
						if (ready0) {
     9be:	1d67      	adds	r7, r4, #5
     9c0:	3135      	adds	r1, #53	; 0x35
					synchronized {
     9c2:	1c5a      	adds	r2, r3, #1
     9c4:	d008      	beq.n	9d8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
     9c6:	7035      	strb	r5, [r6, #0]
						if (ready0) {
     9c8:	7ffa      	ldrb	r2, [r7, #31]
     9ca:	1e58      	subs	r0, r3, #1
     9cc:	b2d2      	uxtb	r2, r2
     9ce:	2a00      	cmp	r2, #0
     9d0:	d1dc      	bne.n	98c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
     9d2:	700a      	strb	r2, [r1, #0]
					synchronized {
     9d4:	0003      	movs	r3, r0
     9d6:	e7f4      	b.n	9c2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
     9d8:	4668      	mov	r0, sp
     9da:	9301      	str	r3, [sp, #4]
     9dc:	f7ff febf 	bl	75e <_ZN7__GuardD1Ev>
			release();
     9e0:	0020      	movs	r0, r4
     9e2:	f7ff fef3 	bl	7cc <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     9e6:	e7d6      	b.n	996 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

000009e8 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
     9e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
     9ea:	466b      	mov	r3, sp
     9ec:	1ddc      	adds	r4, r3, #7
     9ee:	2300      	movs	r3, #0
{
     9f0:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
     9f2:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
     9f4:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
     9f6:	f001 fafd 	bl	1ff4 <_Z16CDC_GetInterfacePh>
     9fa:	682b      	ldr	r3, [r5, #0]
     9fc:	1818      	adds	r0, r3, r0
     9fe:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
     a00:	f001 fb9c 	bl	213c <_Z12PluggableUSBv>
     a04:	0021      	movs	r1, r4
     a06:	f001 fb55 	bl	20b4 <_ZN13PluggableUSB_12getInterfaceEPh>
     a0a:	682b      	ldr	r3, [r5, #0]
     a0c:	1818      	adds	r0, r3, r0
     a0e:	6028      	str	r0, [r5, #0]
	return interfaces;
     a10:	7820      	ldrb	r0, [r4, #0]
}
     a12:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00000a14 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
     a14:	2903      	cmp	r1, #3
     a16:	d10e      	bne.n	a36 <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     a18:	2280      	movs	r2, #128	; 0x80
     a1a:	4b0e      	ldr	r3, [pc, #56]	; (a54 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
     a1c:	3162      	adds	r1, #98	; 0x62
     a1e:	681b      	ldr	r3, [r3, #0]
     a20:	31ff      	adds	r1, #255	; 0xff
     a22:	5c58      	ldrb	r0, [r3, r1]
     a24:	4252      	negs	r2, r2
     a26:	4302      	orrs	r2, r0
     a28:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     a2a:	2268      	movs	r2, #104	; 0x68
     a2c:	3963      	subs	r1, #99	; 0x63
     a2e:	39ff      	subs	r1, #255	; 0xff
     a30:	32ff      	adds	r2, #255	; 0xff
     a32:	5499      	strb	r1, [r3, r2]
}
     a34:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
     a36:	2901      	cmp	r1, #1
     a38:	d1fc      	bne.n	a34 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     a3a:	2280      	movs	r2, #128	; 0x80
     a3c:	4b05      	ldr	r3, [pc, #20]	; (a54 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
     a3e:	3124      	adds	r1, #36	; 0x24
     a40:	681b      	ldr	r3, [r3, #0]
     a42:	31ff      	adds	r1, #255	; 0xff
     a44:	5c58      	ldrb	r0, [r3, r1]
     a46:	4252      	negs	r2, r2
     a48:	4302      	orrs	r2, r0
     a4a:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     a4c:	3923      	subs	r1, #35	; 0x23
     a4e:	39ff      	subs	r1, #255	; 0xff
     a50:	2228      	movs	r2, #40	; 0x28
     a52:	e7ed      	b.n	a30 <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
     a54:	200005dc 	.word	0x200005dc

00000a58 <_ZN14USBDeviceClass4initEv>:
{
     a58:	b570      	push	{r4, r5, r6, lr}
	txLEDPulse = 0;
     a5a:	2500      	movs	r5, #0
     a5c:	4b2f      	ldr	r3, [pc, #188]	; (b1c <_ZN14USBDeviceClass4initEv+0xc4>)
	pinMode(PIN_LED_TXL, OUTPUT);
     a5e:	2101      	movs	r1, #1
{
     a60:	0004      	movs	r4, r0
	pinMode(PIN_LED_TXL, OUTPUT);
     a62:	201f      	movs	r0, #31
	txLEDPulse = 0;
     a64:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
     a66:	f000 fe13 	bl	1690 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
     a6a:	2101      	movs	r1, #1
     a6c:	201f      	movs	r0, #31
     a6e:	f000 fe5b 	bl	1728 <digitalWrite>
	rxLEDPulse = 0;
     a72:	4b2b      	ldr	r3, [pc, #172]	; (b20 <_ZN14USBDeviceClass4initEv+0xc8>)
	pinMode(PIN_LED_RXL, OUTPUT);
     a74:	2101      	movs	r1, #1
     a76:	201e      	movs	r0, #30
	rxLEDPulse = 0;
     a78:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
     a7a:	f000 fe09 	bl	1690 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
     a7e:	2101      	movs	r1, #1
     a80:	201e      	movs	r0, #30
     a82:	f000 fe51 	bl	1728 <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     a86:	2320      	movs	r3, #32
     a88:	4a26      	ldr	r2, [pc, #152]	; (b24 <_ZN14USBDeviceClass4initEv+0xcc>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
     a8a:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     a8c:	69d1      	ldr	r1, [r2, #28]
     a8e:	430b      	orrs	r3, r1
     a90:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
     a92:	2201      	movs	r2, #1
     a94:	4924      	ldr	r1, [pc, #144]	; (b28 <_ZN14USBDeviceClass4initEv+0xd0>)
     a96:	780b      	ldrb	r3, [r1, #0]
     a98:	4313      	orrs	r3, r2
     a9a:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
     a9c:	4b23      	ldr	r3, [pc, #140]	; (b2c <_ZN14USBDeviceClass4initEv+0xd4>)
     a9e:	7819      	ldrb	r1, [r3, #0]
     aa0:	4381      	bics	r1, r0
     aa2:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
     aa4:	2106      	movs	r1, #6
     aa6:	781d      	ldrb	r5, [r3, #0]
     aa8:	4329      	orrs	r1, r5
     aaa:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
     aac:	4920      	ldr	r1, [pc, #128]	; (b30 <_ZN14USBDeviceClass4initEv+0xd8>)
     aae:	780d      	ldrb	r5, [r1, #0]
     ab0:	432a      	orrs	r2, r5
     ab2:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
     ab4:	781a      	ldrb	r2, [r3, #0]
     ab6:	4002      	ands	r2, r0
     ab8:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
     aba:	2260      	movs	r2, #96	; 0x60
     abc:	7819      	ldrb	r1, [r3, #0]
     abe:	430a      	orrs	r2, r1
     ac0:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
     ac2:	4b1c      	ldr	r3, [pc, #112]	; (b34 <_ZN14USBDeviceClass4initEv+0xdc>)
     ac4:	4a1c      	ldr	r2, [pc, #112]	; (b38 <_ZN14USBDeviceClass4initEv+0xe0>)
     ac6:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
     ac8:	785a      	ldrb	r2, [r3, #1]
     aca:	09d2      	lsrs	r2, r2, #7
     acc:	d1fc      	bne.n	ac8 <_ZN14USBDeviceClass4initEv+0x70>
	USB_SetHandler(&UDD_Handler);
     ace:	481b      	ldr	r0, [pc, #108]	; (b3c <_ZN14USBDeviceClass4initEv+0xe4>)
     ad0:	f7ff fc2a 	bl	328 <USB_SetHandler>
	usbd.reset();
     ad4:	4d1a      	ldr	r5, [pc, #104]	; (b40 <_ZN14USBDeviceClass4initEv+0xe8>)
     ad6:	0028      	movs	r0, r5
     ad8:	f7ff fdf8 	bl	6cc <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
     adc:	0028      	movs	r0, r5
     ade:	f7ff fe07 	bl	6f0 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
     ae2:	217f      	movs	r1, #127	; 0x7f
     ae4:	682b      	ldr	r3, [r5, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     ae6:	20c1      	movs	r0, #193	; 0xc1
     ae8:	781a      	ldrb	r2, [r3, #0]
     aea:	0080      	lsls	r0, r0, #2
     aec:	400a      	ands	r2, r1
     aee:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     af0:	2204      	movs	r2, #4
     af2:	7819      	ldrb	r1, [r3, #0]
     af4:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
     af6:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     af8:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
     afa:	891a      	ldrh	r2, [r3, #8]
     afc:	438a      	bics	r2, r1
     afe:	4911      	ldr	r1, [pc, #68]	; (b44 <_ZN14USBDeviceClass4initEv+0xec>)
     b00:	811a      	strh	r2, [r3, #8]
     b02:	580a      	ldr	r2, [r1, r0]
     b04:	0212      	lsls	r2, r2, #8
     b06:	0a12      	lsrs	r2, r2, #8
     b08:	500a      	str	r2, [r1, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b0a:	2280      	movs	r2, #128	; 0x80
     b0c:	600a      	str	r2, [r1, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
     b0e:	7819      	ldrb	r1, [r3, #0]
     b10:	3a7e      	subs	r2, #126	; 0x7e
     b12:	430a      	orrs	r2, r1
     b14:	701a      	strb	r2, [r3, #0]
	initialized = true;
     b16:	2301      	movs	r3, #1
     b18:	7023      	strb	r3, [r4, #0]
}
     b1a:	bd70      	pop	{r4, r5, r6, pc}
     b1c:	20000145 	.word	0x20000145
     b20:	20000144 	.word	0x20000144
     b24:	40000400 	.word	0x40000400
     b28:	41004458 	.word	0x41004458
     b2c:	4100443c 	.word	0x4100443c
     b30:	41004459 	.word	0x41004459
     b34:	40000c00 	.word	0x40000c00
     b38:	00004006 	.word	0x00004006
     b3c:	0000151d 	.word	0x0000151d
     b40:	200005dc 	.word	0x200005dc
     b44:	e000e100 	.word	0xe000e100

00000b48 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
     b48:	7800      	ldrb	r0, [r0, #0]
     b4a:	2800      	cmp	r0, #0
     b4c:	d010      	beq.n	b70 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
     b4e:	2101      	movs	r1, #1
     b50:	4b08      	ldr	r3, [pc, #32]	; (b74 <_ZN14USBDeviceClass6attachEv+0x2c>)
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	891a      	ldrh	r2, [r3, #8]
     b56:	438a      	bics	r2, r1
     b58:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
     b5a:	2208      	movs	r2, #8
     b5c:	8b19      	ldrh	r1, [r3, #24]
     b5e:	430a      	orrs	r2, r1
     b60:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
     b62:	2204      	movs	r2, #4
     b64:	8b19      	ldrh	r1, [r3, #24]
     b66:	430a      	orrs	r2, r1
     b68:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
     b6a:	2200      	movs	r2, #0
     b6c:	4b02      	ldr	r3, [pc, #8]	; (b78 <_ZN14USBDeviceClass6attachEv+0x30>)
     b6e:	601a      	str	r2, [r3, #0]
}
     b70:	4770      	bx	lr
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	200005dc 	.word	0x200005dc
     b78:	200005d4 	.word	0x200005d4

00000b7c <_ZN14USBDeviceClass10setAddressEm>:
{
     b7c:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     b7e:	4a0f      	ldr	r2, [pc, #60]	; (bbc <_ZN14USBDeviceClass10setAddressEm+0x40>)
     b80:	6993      	ldr	r3, [r2, #24]
     b82:	0b9b      	lsrs	r3, r3, #14
     b84:	039b      	lsls	r3, r3, #14
     b86:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     b88:	6813      	ldr	r3, [r2, #0]
     b8a:	2202      	movs	r2, #2
     b8c:	33ff      	adds	r3, #255	; 0xff
     b8e:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     b90:	7998      	ldrb	r0, [r3, #6]
     b92:	3a82      	subs	r2, #130	; 0x82
     b94:	4302      	orrs	r2, r0
     b96:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
     b98:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
     b9a:	0792      	lsls	r2, r2, #30
     b9c:	d5fc      	bpl.n	b98 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
     b9e:	247f      	movs	r4, #127	; 0x7f
     ba0:	4a07      	ldr	r2, [pc, #28]	; (bc0 <_ZN14USBDeviceClass10setAddressEm+0x44>)
     ba2:	4021      	ands	r1, r4
     ba4:	7a93      	ldrb	r3, [r2, #10]
     ba6:	0008      	movs	r0, r1
     ba8:	43a3      	bics	r3, r4
     baa:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
     bac:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
     bae:	4301      	orrs	r1, r0
     bb0:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
     bb2:	7a91      	ldrb	r1, [r2, #10]
     bb4:	425b      	negs	r3, r3
     bb6:	430b      	orrs	r3, r1
     bb8:	7293      	strb	r3, [r2, #10]
}
     bba:	bd10      	pop	{r4, pc}
     bbc:	200005dc 	.word	0x200005dc
     bc0:	41005000 	.word	0x41005000

00000bc4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
     bc4:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
     bc6:	790b      	ldrb	r3, [r1, #4]
{
     bc8:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
     bca:	2b00      	cmp	r3, #0
     bcc:	d10c      	bne.n	be8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
     bce:	0008      	movs	r0, r1
     bd0:	f001 fa1e 	bl	2010 <_Z9CDC_SetupR8USBSetup>
     bd4:	2800      	cmp	r0, #0
     bd6:	d001      	beq.n	bdc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
     bd8:	2001      	movs	r0, #1
}
     bda:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     bdc:	4a09      	ldr	r2, [pc, #36]	; (c04 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
     bde:	6993      	ldr	r3, [r2, #24]
     be0:	0b9b      	lsrs	r3, r3, #14
     be2:	039b      	lsls	r3, r3, #14
     be4:	6193      	str	r3, [r2, #24]
     be6:	e7f7      	b.n	bd8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
     be8:	f001 faa8 	bl	213c <_Z12PluggableUSBv>
     bec:	0021      	movs	r1, r4
     bee:	f001 fa94 	bl	211a <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
     bf2:	2800      	cmp	r0, #0
     bf4:	d1f0      	bne.n	bd8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
     bf6:	4a03      	ldr	r2, [pc, #12]	; (c04 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
     bf8:	6993      	ldr	r3, [r2, #24]
     bfa:	0b9b      	lsrs	r3, r3, #14
     bfc:	039b      	lsls	r3, r3, #14
     bfe:	6193      	str	r3, [r2, #24]
     c00:	e7eb      	b.n	bda <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	200005dc 	.word	0x200005dc

00000c08 <_ZN14USBDeviceClass6initEPEmm>:
{
     c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     c0a:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
     c0c:	2a83      	cmp	r2, #131	; 0x83
     c0e:	d119      	bne.n	c44 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c10:	b2cb      	uxtb	r3, r1
     c12:	4c33      	ldr	r4, [pc, #204]	; (ce0 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
     c14:	015a      	lsls	r2, r3, #5
     c16:	18a2      	adds	r2, r4, r2
     c18:	6991      	ldr	r1, [r2, #24]
     c1a:	4832      	ldr	r0, [pc, #200]	; (ce4 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     c1c:	01ad      	lsls	r5, r5, #6
     c1e:	4008      	ands	r0, r1
     c20:	21c0      	movs	r1, #192	; 0xc0
     c22:	0589      	lsls	r1, r1, #22
     c24:	4301      	orrs	r1, r0
     c26:	6191      	str	r1, [r2, #24]
     c28:	492f      	ldr	r1, [pc, #188]	; (ce8 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     c2a:	6820      	ldr	r0, [r4, #0]
     c2c:	194d      	adds	r5, r1, r5
     c2e:	2170      	movs	r1, #112	; 0x70
     c30:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     c32:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     c34:	015b      	lsls	r3, r3, #5
     c36:	5c1a      	ldrb	r2, [r3, r0]
     c38:	438a      	bics	r2, r1
     c3a:	0011      	movs	r1, r2
     c3c:	2240      	movs	r2, #64	; 0x40
     c3e:	430a      	orrs	r2, r1
     c40:	541a      	strb	r2, [r3, r0]
}
     c42:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
     c44:	2a02      	cmp	r2, #2
     c46:	d145      	bne.n	cd4 <_ZN14USBDeviceClass6initEPEmm+0xcc>
		if (epHandlers[ep] != NULL) {
     c48:	4a28      	ldr	r2, [pc, #160]	; (cec <_ZN14USBDeviceClass6initEPEmm+0xe4>)
     c4a:	008b      	lsls	r3, r1, #2
     c4c:	5898      	ldr	r0, [r3, r2]
     c4e:	2800      	cmp	r0, #0
     c50:	d002      	beq.n	c58 <_ZN14USBDeviceClass6initEPEmm+0x50>
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
     c52:	6803      	ldr	r3, [r0, #0]
     c54:	691b      	ldr	r3, [r3, #16]
     c56:	4798      	blx	r3
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
     c58:	2038      	movs	r0, #56	; 0x38
     c5a:	f7ff fba7 	bl	3ac <_Znwj>
		notify(false)
     c5e:	4b24      	ldr	r3, [pc, #144]	; (cf0 <_ZN14USBDeviceClass6initEPEmm+0xe8>)
     c60:	2780      	movs	r7, #128	; 0x80
     c62:	6003      	str	r3, [r0, #0]
     c64:	2300      	movs	r3, #0
     c66:	4e1e      	ldr	r6, [pc, #120]	; (ce0 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
     c68:	007f      	lsls	r7, r7, #1
     c6a:	1d42      	adds	r2, r0, #5
     c6c:	6203      	str	r3, [r0, #32]
     c6e:	6103      	str	r3, [r0, #16]
     c70:	6143      	str	r3, [r0, #20]
     c72:	61c3      	str	r3, [r0, #28]
     c74:	6046      	str	r6, [r0, #4]
     c76:	6085      	str	r5, [r0, #8]
     c78:	60c7      	str	r7, [r0, #12]
     c7a:	77d3      	strb	r3, [r2, #31]
     c7c:	322f      	adds	r2, #47	; 0x2f
     c7e:	62c3      	str	r3, [r0, #44]	; 0x2c
     c80:	6303      	str	r3, [r0, #48]	; 0x30
     c82:	0004      	movs	r4, r0
     c84:	7013      	strb	r3, [r2, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
     c86:	0038      	movs	r0, r7
		notify(false)
     c88:	7053      	strb	r3, [r2, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
     c8a:	f001 fb37 	bl	22fc <malloc>
     c8e:	9001      	str	r0, [sp, #4]
     c90:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
     c92:	0038      	movs	r0, r7
     c94:	f001 fb32 	bl	22fc <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c98:	b2eb      	uxtb	r3, r5
     c9a:	015a      	lsls	r2, r3, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
     c9c:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c9e:	18b2      	adds	r2, r6, r2
     ca0:	6891      	ldr	r1, [r2, #8]
     ca2:	4810      	ldr	r0, [pc, #64]	; (ce4 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     ca4:	3308      	adds	r3, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     ca6:	4008      	ands	r0, r1
     ca8:	21c0      	movs	r1, #192	; 0xc0
     caa:	0589      	lsls	r1, r1, #22
     cac:	4301      	orrs	r1, r0
     cae:	6091      	str	r1, [r2, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     cb0:	6831      	ldr	r1, [r6, #0]
     cb2:	2607      	movs	r6, #7
     cb4:	015b      	lsls	r3, r3, #5
     cb6:	5c58      	ldrb	r0, [r3, r1]
     cb8:	00ad      	lsls	r5, r5, #2
     cba:	43b0      	bics	r0, r6
     cbc:	0006      	movs	r6, r0
     cbe:	2003      	movs	r0, #3
     cc0:	4330      	orrs	r0, r6
     cc2:	5458      	strb	r0, [r3, r1]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     cc4:	9b01      	ldr	r3, [sp, #4]
		release();
     cc6:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     cc8:	6053      	str	r3, [r2, #4]
		release();
     cca:	f7ff fd7f 	bl	7cc <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     cce:	4b07      	ldr	r3, [pc, #28]	; (cec <_ZN14USBDeviceClass6initEPEmm+0xe4>)
     cd0:	515c      	str	r4, [r3, r5]
     cd2:	e7b6      	b.n	c42 <_ZN14USBDeviceClass6initEPEmm+0x3a>
     cd4:	0011      	movs	r1, r2
     cd6:	0028      	movs	r0, r5
     cd8:	f7ff fc90 	bl	5fc <_ZN14USBDeviceClass6initEPEmm.part.5>
}
     cdc:	e7b1      	b.n	c42 <_ZN14USBDeviceClass6initEPEmm+0x3a>
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	200005dc 	.word	0x200005dc
     ce4:	8fffffff 	.word	0x8fffffff
     ce8:	20000150 	.word	0x20000150
     cec:	20000128 	.word	0x20000128
     cf0:	00002514 	.word	0x00002514

00000cf4 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
     cf4:	b570      	push	{r4, r5, r6, lr}
     cf6:	0005      	movs	r5, r0
     cf8:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
     cfa:	4b06      	ldr	r3, [pc, #24]	; (d14 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
     cfc:	00a2      	lsls	r2, r4, #2
     cfe:	58d2      	ldr	r2, [r2, r3]
     d00:	2a00      	cmp	r2, #0
     d02:	d005      	beq.n	d10 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
     d04:	0021      	movs	r1, r4
     d06:	0028      	movs	r0, r5
     d08:	f7ff ff7e 	bl	c08 <_ZN14USBDeviceClass6initEPEmm>
     d0c:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
     d0e:	e7f4      	b.n	cfa <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
     d10:	bd70      	pop	{r4, r5, r6, pc}
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	20000004 	.word	0x20000004

00000d18 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
     d18:	4b08      	ldr	r3, [pc, #32]	; (d3c <_ZN14USBDeviceClass9availableEm+0x24>)
     d1a:	008a      	lsls	r2, r1, #2
     d1c:	58d0      	ldr	r0, [r2, r3]
{
     d1e:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
     d20:	2800      	cmp	r0, #0
     d22:	d003      	beq.n	d2c <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
     d24:	6803      	ldr	r3, [r0, #0]
     d26:	689b      	ldr	r3, [r3, #8]
     d28:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
     d2a:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     d2c:	b2c9      	uxtb	r1, r1
     d2e:	4b04      	ldr	r3, [pc, #16]	; (d40 <_ZN14USBDeviceClass9availableEm+0x28>)
     d30:	0149      	lsls	r1, r1, #5
     d32:	1859      	adds	r1, r3, r1
     d34:	6888      	ldr	r0, [r1, #8]
     d36:	0480      	lsls	r0, r0, #18
     d38:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
     d3a:	e7f6      	b.n	d2a <_ZN14USBDeviceClass9availableEm+0x12>
     d3c:	20000128 	.word	0x20000128
     d40:	200005dc 	.word	0x200005dc

00000d44 <_ZN14USBDeviceClass5flushEm>:
{
     d44:	b510      	push	{r4, lr}
     d46:	000c      	movs	r4, r1
	if (available(ep)) {
     d48:	f7ff ffe6 	bl	d18 <_ZN14USBDeviceClass9availableEm>
     d4c:	2800      	cmp	r0, #0
     d4e:	d00c      	beq.n	d6a <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     d50:	4b06      	ldr	r3, [pc, #24]	; (d6c <_ZN14USBDeviceClass5flushEm+0x28>)
     d52:	b2e4      	uxtb	r4, r4
     d54:	681b      	ldr	r3, [r3, #0]
     d56:	3408      	adds	r4, #8
     d58:	0164      	lsls	r4, r4, #5
     d5a:	191c      	adds	r4, r3, r4
     d5c:	2380      	movs	r3, #128	; 0x80
     d5e:	7962      	ldrb	r2, [r4, #5]
     d60:	425b      	negs	r3, r3
     d62:	4313      	orrs	r3, r2
     d64:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     d66:	2302      	movs	r3, #2
     d68:	71e3      	strb	r3, [r4, #7]
}
     d6a:	bd10      	pop	{r4, pc}
     d6c:	200005dc 	.word	0x200005dc

00000d70 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
     d70:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     d72:	4b13      	ldr	r3, [pc, #76]	; (dc0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     d74:	b2cc      	uxtb	r4, r1
     d76:	4a13      	ldr	r2, [pc, #76]	; (dc4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
     d78:	0160      	lsls	r0, r4, #5
     d7a:	0189      	lsls	r1, r1, #6
     d7c:	1859      	adds	r1, r3, r1
     d7e:	1813      	adds	r3, r2, r0
     d80:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     d82:	6899      	ldr	r1, [r3, #8]
     d84:	4d10      	ldr	r5, [pc, #64]	; (dc8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     d86:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     d88:	400d      	ands	r5, r1
     d8a:	2180      	movs	r1, #128	; 0x80
     d8c:	0289      	lsls	r1, r1, #10
     d8e:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     d90:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     d92:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     d94:	6899      	ldr	r1, [r3, #8]
     d96:	0b89      	lsrs	r1, r1, #14
     d98:	0389      	lsls	r1, r1, #14
     d9a:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     d9c:	6811      	ldr	r1, [r2, #0]
     d9e:	0163      	lsls	r3, r4, #5
     da0:	18cb      	adds	r3, r1, r3
     da2:	791e      	ldrb	r6, [r3, #4]
     da4:	4335      	orrs	r5, r6
     da6:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
     da8:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
     daa:	066d      	lsls	r5, r5, #25
     dac:	d5fc      	bpl.n	da8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     dae:	0164      	lsls	r4, r4, #5
     db0:	1909      	adds	r1, r1, r4
     db2:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
     db4:	07db      	lsls	r3, r3, #31
     db6:	d5fc      	bpl.n	db2 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     db8:	1812      	adds	r2, r2, r0
     dba:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
     dbc:	b2c0      	uxtb	r0, r0
}
     dbe:	bd70      	pop	{r4, r5, r6, pc}
     dc0:	20000310 	.word	0x20000310
     dc4:	200005dc 	.word	0x200005dc
     dc8:	f0003fff 	.word	0xf0003fff

00000dcc <_ZN14USBDeviceClass11recvControlEPvm>:
{
     dcc:	b570      	push	{r4, r5, r6, lr}
     dce:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     dd0:	2240      	movs	r2, #64	; 0x40
     dd2:	4b0b      	ldr	r3, [pc, #44]	; (e00 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
     dd4:	000d      	movs	r5, r1
     dd6:	681b      	ldr	r3, [r3, #0]
     dd8:	33ff      	adds	r3, #255	; 0xff
     dda:	7959      	ldrb	r1, [r3, #5]
     ddc:	430a      	orrs	r2, r1
     dde:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
     de0:	2100      	movs	r1, #0
     de2:	f7ff ffc5 	bl	d70 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
     de6:	42a0      	cmp	r0, r4
     de8:	d900      	bls.n	dec <_ZN14USBDeviceClass11recvControlEPvm+0x20>
     dea:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
     dec:	2300      	movs	r3, #0
		data[i] = buffer[i];
     dee:	4905      	ldr	r1, [pc, #20]	; (e04 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
     df0:	42a3      	cmp	r3, r4
     df2:	d003      	beq.n	dfc <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
     df4:	5c5a      	ldrb	r2, [r3, r1]
     df6:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
     df8:	3301      	adds	r3, #1
     dfa:	e7f9      	b.n	df0 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
     dfc:	bd70      	pop	{r4, r5, r6, pc}
     dfe:	46c0      	nop			; (mov r8, r8)
     e00:	200005dc 	.word	0x200005dc
     e04:	20000310 	.word	0x20000310

00000e08 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
     e08:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     e0a:	b2c9      	uxtb	r1, r1
     e0c:	480b      	ldr	r0, [pc, #44]	; (e3c <_ZN14USBDeviceClass7armRecvEm+0x34>)
     e0e:	0149      	lsls	r1, r1, #5
     e10:	1842      	adds	r2, r0, r1
     e12:	6893      	ldr	r3, [r2, #8]
     e14:	049b      	lsls	r3, r3, #18
     e16:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
     e18:	2b3f      	cmp	r3, #63	; 0x3f
     e1a:	dd0b      	ble.n	e34 <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     e1c:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
     e1e:	3b40      	subs	r3, #64	; 0x40
     e20:	049b      	lsls	r3, r3, #18
     e22:	0ba4      	lsrs	r4, r4, #14
     e24:	0c9b      	lsrs	r3, r3, #18
     e26:	03a4      	lsls	r4, r4, #14
     e28:	4323      	orrs	r3, r4
     e2a:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     e2c:	1841      	adds	r1, r0, r1
     e2e:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
     e30:	b2c0      	uxtb	r0, r0
}
     e32:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     e34:	6893      	ldr	r3, [r2, #8]
     e36:	0b9b      	lsrs	r3, r3, #14
     e38:	039b      	lsls	r3, r3, #14
     e3a:	e7f6      	b.n	e2a <_ZN14USBDeviceClass7armRecvEm+0x22>
     e3c:	200005dc 	.word	0x200005dc

00000e40 <_ZN14USBDeviceClass4recvEmPvm>:
{
     e40:	b5f0      	push	{r4, r5, r6, r7, lr}
     e42:	001c      	movs	r4, r3
	if (!_usbConfiguration)
     e44:	4b30      	ldr	r3, [pc, #192]	; (f08 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
     e46:	b085      	sub	sp, #20
	if (!_usbConfiguration)
     e48:	681b      	ldr	r3, [r3, #0]
{
     e4a:	0006      	movs	r6, r0
     e4c:	000d      	movs	r5, r1
     e4e:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
     e50:	2b00      	cmp	r3, #0
     e52:	d055      	beq.n	f00 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	if (rxLEDPulse == 0)
     e54:	4f2d      	ldr	r7, [pc, #180]	; (f0c <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
     e56:	7839      	ldrb	r1, [r7, #0]
     e58:	b2c9      	uxtb	r1, r1
     e5a:	2900      	cmp	r1, #0
     e5c:	d102      	bne.n	e64 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
     e5e:	201e      	movs	r0, #30
     e60:	f000 fc62 	bl	1728 <digitalWrite>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
     e64:	2364      	movs	r3, #100	; 0x64
     e66:	703b      	strb	r3, [r7, #0]
	if (epHandlers[ep]) {
     e68:	4b29      	ldr	r3, [pc, #164]	; (f10 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
     e6a:	00aa      	lsls	r2, r5, #2
     e6c:	58d0      	ldr	r0, [r2, r3]
     e6e:	2800      	cmp	r0, #0
     e70:	d008      	beq.n	e84 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
     e72:	6803      	ldr	r3, [r0, #0]
     e74:	0022      	movs	r2, r4
     e76:	685b      	ldr	r3, [r3, #4]
     e78:	9901      	ldr	r1, [sp, #4]
     e7a:	4798      	blx	r3
     e7c:	0004      	movs	r4, r0
}
     e7e:	0020      	movs	r0, r4
     e80:	b005      	add	sp, #20
     e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
     e84:	0029      	movs	r1, r5
     e86:	0030      	movs	r0, r6
     e88:	f7ff ff46 	bl	d18 <_ZN14USBDeviceClass9availableEm>
     e8c:	4284      	cmp	r4, r0
     e8e:	d904      	bls.n	e9a <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
     e90:	0029      	movs	r1, r5
     e92:	0030      	movs	r0, r6
     e94:	f7ff ff40 	bl	d18 <_ZN14USBDeviceClass9availableEm>
     e98:	0004      	movs	r4, r0
	armRecv(ep);
     e9a:	0029      	movs	r1, r5
     e9c:	0030      	movs	r0, r6
     e9e:	f7ff ffb3 	bl	e08 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
     ea2:	2101      	movs	r1, #1
     ea4:	b2eb      	uxtb	r3, r5
     ea6:	4f1b      	ldr	r7, [pc, #108]	; (f14 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
     ea8:	9303      	str	r3, [sp, #12]
     eaa:	015b      	lsls	r3, r3, #5
     eac:	9302      	str	r3, [sp, #8]
     eae:	9a02      	ldr	r2, [sp, #8]
     eb0:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
     eb2:	9801      	ldr	r0, [sp, #4]
     eb4:	189b      	adds	r3, r3, r2
     eb6:	33ff      	adds	r3, #255	; 0xff
     eb8:	7a5a      	ldrb	r2, [r3, #9]
     eba:	430a      	orrs	r2, r1
     ebc:	4916      	ldr	r1, [pc, #88]	; (f18 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
     ebe:	725a      	strb	r2, [r3, #9]
     ec0:	01ab      	lsls	r3, r5, #6
     ec2:	18c9      	adds	r1, r1, r3
     ec4:	0022      	movs	r2, r4
     ec6:	f001 fa2d 	bl	2324 <memcpy>
	if (len && !available(ep)) {
     eca:	2c00      	cmp	r4, #0
     ecc:	d0d7      	beq.n	e7e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
     ece:	0029      	movs	r1, r5
     ed0:	0030      	movs	r0, r6
     ed2:	f7ff ff21 	bl	d18 <_ZN14USBDeviceClass9availableEm>
     ed6:	2800      	cmp	r0, #0
     ed8:	d1d1      	bne.n	e7e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     eda:	2140      	movs	r1, #64	; 0x40
     edc:	9b03      	ldr	r3, [sp, #12]
     ede:	683a      	ldr	r2, [r7, #0]
     ee0:	3308      	adds	r3, #8
     ee2:	015b      	lsls	r3, r3, #5
     ee4:	18d3      	adds	r3, r2, r3
     ee6:	7918      	ldrb	r0, [r3, #4]
     ee8:	4301      	orrs	r1, r0
     eea:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     eec:	2101      	movs	r1, #1
     eee:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     ef0:	2101      	movs	r1, #1
     ef2:	9b02      	ldr	r3, [sp, #8]
     ef4:	18d3      	adds	r3, r2, r3
     ef6:	33ff      	adds	r3, #255	; 0xff
     ef8:	7a9a      	ldrb	r2, [r3, #10]
     efa:	430a      	orrs	r2, r1
     efc:	729a      	strb	r2, [r3, #10]
     efe:	e7be      	b.n	e7e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
     f00:	2401      	movs	r4, #1
     f02:	4264      	negs	r4, r4
     f04:	e7bb      	b.n	e7e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	200005d4 	.word	0x200005d4
     f0c:	20000144 	.word	0x20000144
     f10:	20000128 	.word	0x20000128
     f14:	200005dc 	.word	0x200005dc
     f18:	20000310 	.word	0x20000310

00000f1c <_ZN14USBDeviceClass4recvEm>:
{
     f1c:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
     f1e:	466b      	mov	r3, sp
     f20:	1ddc      	adds	r4, r3, #7
     f22:	0022      	movs	r2, r4
     f24:	2301      	movs	r3, #1
     f26:	f7ff ff8b 	bl	e40 <_ZN14USBDeviceClass4recvEmPvm>
     f2a:	2801      	cmp	r0, #1
     f2c:	d101      	bne.n	f32 <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
     f2e:	7820      	ldrb	r0, [r4, #0]
}
     f30:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
     f32:	2001      	movs	r0, #1
     f34:	4240      	negs	r0, r0
     f36:	e7fb      	b.n	f30 <_ZN14USBDeviceClass4recvEm+0x14>

00000f38 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
     f38:	b5f0      	push	{r4, r5, r6, r7, lr}
     f3a:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
     f3c:	4b3a      	ldr	r3, [pc, #232]	; (1028 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
     f3e:	b085      	sub	sp, #20
	if (!_usbConfiguration)
     f40:	681b      	ldr	r3, [r3, #0]
{
     f42:	000f      	movs	r7, r1
     f44:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
     f46:	2b00      	cmp	r3, #0
     f48:	d03f      	beq.n	fca <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
     f4a:	2380      	movs	r3, #128	; 0x80
     f4c:	01db      	lsls	r3, r3, #7
     f4e:	429e      	cmp	r6, r3
     f50:	d83b      	bhi.n	fca <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
     f52:	4c36      	ldr	r4, [pc, #216]	; (102c <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
     f54:	7821      	ldrb	r1, [r4, #0]
     f56:	b2c9      	uxtb	r1, r1
     f58:	2900      	cmp	r1, #0
     f5a:	d102      	bne.n	f62 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
     f5c:	201f      	movs	r0, #31
     f5e:	f000 fbe3 	bl	1728 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
     f62:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
     f64:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     f66:	4a32      	ldr	r2, [pc, #200]	; (1030 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
     f68:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     f6a:	01bb      	lsls	r3, r7, #6
     f6c:	18d3      	adds	r3, r2, r3
     f6e:	9302      	str	r3, [sp, #8]
	while (len != 0)
     f70:	2e00      	cmp	r6, #0
     f72:	d02c      	beq.n	fce <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
     f74:	4b2f      	ldr	r3, [pc, #188]	; (1034 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
     f76:	681b      	ldr	r3, [r3, #0]
     f78:	9303      	str	r3, [sp, #12]
     f7a:	23ff      	movs	r3, #255	; 0xff
     f7c:	403b      	ands	r3, r7
     f7e:	001c      	movs	r4, r3
     f80:	9300      	str	r3, [sp, #0]
     f82:	3408      	adds	r4, #8
     f84:	9b03      	ldr	r3, [sp, #12]
     f86:	0164      	lsls	r4, r4, #5
     f88:	191c      	adds	r4, r3, r4
     f8a:	79a3      	ldrb	r3, [r4, #6]
     f8c:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
     f8e:	d021      	beq.n	fd4 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
     f90:	4b29      	ldr	r3, [pc, #164]	; (1038 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
     f92:	492a      	ldr	r1, [pc, #168]	; (103c <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
     f94:	6818      	ldr	r0, [r3, #0]
     f96:	f001 f901 	bl	219c <__udivsi3>
     f9a:	4b29      	ldr	r3, [pc, #164]	; (1040 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
     f9c:	2117      	movs	r1, #23
     f9e:	4358      	muls	r0, r3
     fa0:	f001 f8fc 	bl	219c <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
     fa4:	4b27      	ldr	r3, [pc, #156]	; (1044 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
     fa6:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
     fa8:	0792      	lsls	r2, r2, #30
     faa:	d413      	bmi.n	fd4 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
     fac:	5dda      	ldrb	r2, [r3, r7]
     fae:	2a00      	cmp	r2, #0
     fb0:	d101      	bne.n	fb6 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
     fb2:	3801      	subs	r0, #1
     fb4:	d2f7      	bcs.n	fa6 <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
     fb6:	2201      	movs	r2, #1
     fb8:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     fba:	9b00      	ldr	r3, [sp, #0]
     fbc:	015a      	lsls	r2, r3, #5
     fbe:	4b1d      	ldr	r3, [pc, #116]	; (1034 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
     fc0:	189b      	adds	r3, r3, r2
     fc2:	699a      	ldr	r2, [r3, #24]
     fc4:	0b92      	lsrs	r2, r2, #14
     fc6:	0392      	lsls	r2, r2, #14
     fc8:	619a      	str	r2, [r3, #24]
					return -1;
     fca:	2501      	movs	r5, #1
     fcc:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
     fce:	0028      	movs	r0, r5
     fd0:	b005      	add	sp, #20
     fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
     fd4:	2200      	movs	r2, #0
     fd6:	4b1b      	ldr	r3, [pc, #108]	; (1044 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
     fd8:	0034      	movs	r4, r6
     fda:	55da      	strb	r2, [r3, r7]
     fdc:	2e3f      	cmp	r6, #63	; 0x3f
     fde:	d900      	bls.n	fe2 <_ZN14USBDeviceClass4sendEmPKvm+0xaa>
     fe0:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     fe2:	0022      	movs	r2, r4
     fe4:	9901      	ldr	r1, [sp, #4]
     fe6:	9802      	ldr	r0, [sp, #8]
     fe8:	f001 f99c 	bl	2324 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     fec:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     fee:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     ff0:	015a      	lsls	r2, r3, #5
     ff2:	4b10      	ldr	r3, [pc, #64]	; (1034 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     ff4:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     ff6:	189b      	adds	r3, r3, r2
     ff8:	9a02      	ldr	r2, [sp, #8]
		written += length;
     ffa:	192d      	adds	r5, r5, r4
     ffc:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     ffe:	699a      	ldr	r2, [r3, #24]
		len -= length;
    1000:	1b36      	subs	r6, r6, r4
    1002:	0b92      	lsrs	r2, r2, #14
    1004:	0392      	lsls	r2, r2, #14
    1006:	430a      	orrs	r2, r1
    1008:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    100a:	9b00      	ldr	r3, [sp, #0]
    100c:	9a03      	ldr	r2, [sp, #12]
    100e:	3308      	adds	r3, #8
    1010:	015b      	lsls	r3, r3, #5
    1012:	18d3      	adds	r3, r2, r3
    1014:	2202      	movs	r2, #2
    1016:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1018:	7959      	ldrb	r1, [r3, #5]
    101a:	3a82      	subs	r2, #130	; 0x82
    101c:	430a      	orrs	r2, r1
    101e:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    1020:	9b01      	ldr	r3, [sp, #4]
    1022:	191b      	adds	r3, r3, r4
    1024:	9301      	str	r3, [sp, #4]
	while (len != 0)
    1026:	e7a3      	b.n	f70 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    1028:	200005d4 	.word	0x200005d4
    102c:	20000145 	.word	0x20000145
    1030:	20000150 	.word	0x20000150
    1034:	200005dc 	.word	0x200005dc
    1038:	2000002c 	.word	0x2000002c
    103c:	000f4240 	.word	0x000f4240
    1040:	00011170 	.word	0x00011170
    1044:	20000147 	.word	0x20000147

00001048 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    1048:	b570      	push	{r4, r5, r6, lr}
    104a:	000d      	movs	r5, r1
    104c:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    104e:	4e0d      	ldr	r6, [pc, #52]	; (1084 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    1050:	01ab      	lsls	r3, r5, #6
    1052:	18f6      	adds	r6, r6, r3
{
    1054:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1056:	0030      	movs	r0, r6
    1058:	0022      	movs	r2, r4
    105a:	f001 f963 	bl	2324 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    105e:	b2ed      	uxtb	r5, r5
    1060:	4909      	ldr	r1, [pc, #36]	; (1088 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    1062:	016d      	lsls	r5, r5, #5
    1064:	194d      	adds	r5, r1, r5
    1066:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1068:	69ab      	ldr	r3, [r5, #24]
    106a:	4a08      	ldr	r2, [pc, #32]	; (108c <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    106c:	0020      	movs	r0, r4
    106e:	4013      	ands	r3, r2
    1070:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1072:	69ab      	ldr	r3, [r5, #24]
    1074:	04a2      	lsls	r2, r4, #18
    1076:	0b9b      	lsrs	r3, r3, #14
    1078:	0c92      	lsrs	r2, r2, #18
    107a:	039b      	lsls	r3, r3, #14
    107c:	4313      	orrs	r3, r2
    107e:	61ab      	str	r3, [r5, #24]
    1080:	bd70      	pop	{r4, r5, r6, pc}
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	20000150 	.word	0x20000150
    1088:	200005dc 	.word	0x200005dc
    108c:	f0003fff 	.word	0xf0003fff

00001090 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    1090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    1092:	4b10      	ldr	r3, [pc, #64]	; (10d4 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    1094:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    1096:	781b      	ldrb	r3, [r3, #0]
{
    1098:	000f      	movs	r7, r1
    109a:	0015      	movs	r5, r2
	if (_dry_run == true)
    109c:	2b00      	cmp	r3, #0
    109e:	d10c      	bne.n	10ba <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    10a0:	4b0d      	ldr	r3, [pc, #52]	; (10d8 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    10a2:	0016      	movs	r6, r2
    10a4:	781c      	ldrb	r4, [r3, #0]
    10a6:	2c00      	cmp	r4, #0
    10a8:	d009      	beq.n	10be <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    10aa:	4e0c      	ldr	r6, [pc, #48]	; (10dc <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    10ac:	480c      	ldr	r0, [pc, #48]	; (10e0 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    10ae:	8834      	ldrh	r4, [r6, #0]
    10b0:	1900      	adds	r0, r0, r4
		_pack_size += len;
    10b2:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    10b4:	f001 f936 	bl	2324 <memcpy>
		_pack_size += len;
    10b8:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    10ba:	0028      	movs	r0, r5
    10bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    10be:	2e00      	cmp	r6, #0
    10c0:	d0fb      	beq.n	10ba <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    10c2:	193a      	adds	r2, r7, r4
    10c4:	0033      	movs	r3, r6
    10c6:	2100      	movs	r1, #0
    10c8:	9801      	ldr	r0, [sp, #4]
    10ca:	f7ff ffbd 	bl	1048 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    10ce:	1824      	adds	r4, r4, r0
		len -= sent;
    10d0:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    10d2:	e7f4      	b.n	10be <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    10d4:	200004d0 	.word	0x200004d0
    10d8:	200005d1 	.word	0x200005d1
    10dc:	200005d2 	.word	0x200005d2
    10e0:	200004d1 	.word	0x200004d1

000010e4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    10e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    10e6:	2000      	movs	r0, #0
{
    10e8:	af00      	add	r7, sp, #0
    10ea:	000e      	movs	r6, r1
    10ec:	0015      	movs	r5, r2
	if (maxlen < 2)
    10ee:	2a01      	cmp	r2, #1
    10f0:	dd26      	ble.n	1140 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    10f2:	1dd3      	adds	r3, r2, #7
    10f4:	466a      	mov	r2, sp
    10f6:	08db      	lsrs	r3, r3, #3
    10f8:	00db      	lsls	r3, r3, #3
    10fa:	1ad3      	subs	r3, r2, r3
    10fc:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    10fe:	0008      	movs	r0, r1
    1100:	f001 f9dc 	bl	24bc <strlen>
	uint8_t buffer[maxlen];
    1104:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    1106:	2303      	movs	r3, #3
		buffer[i] = 0;
    1108:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    110a:	3001      	adds	r0, #1
    110c:	0040      	lsls	r0, r0, #1
    110e:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    1110:	7063      	strb	r3, [r4, #1]
    1112:	1e5a      	subs	r2, r3, #1
    1114:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    1116:	4295      	cmp	r5, r2
    1118:	dd0b      	ble.n	1132 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    111a:	7830      	ldrb	r0, [r6, #0]
    111c:	2800      	cmp	r0, #0
    111e:	d008      	beq.n	1132 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    1120:	3601      	adds	r6, #1
    1122:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    1124:	429d      	cmp	r5, r3
    1126:	d003      	beq.n	1130 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    1128:	54e1      	strb	r1, [r4, r3]
    112a:	3302      	adds	r3, #2
    112c:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    112e:	e7f0      	b.n	1112 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    1130:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    1132:	0021      	movs	r1, r4
    1134:	4803      	ldr	r0, [pc, #12]	; (1144 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    1136:	f7ff ffab 	bl	1090 <_ZN14USBDeviceClass11sendControlEPKvm>
    113a:	1e43      	subs	r3, r0, #1
    113c:	4198      	sbcs	r0, r3
    113e:	b2c0      	uxtb	r0, r0
}
    1140:	46bd      	mov	sp, r7
    1142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1144:	20000124 	.word	0x20000124

00001148 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    1148:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    114a:	2700      	movs	r7, #0
	_dry_run = true;
    114c:	2601      	movs	r6, #1
{
    114e:	b087      	sub	sp, #28
	_dry_run = true;
    1150:	4b1e      	ldr	r3, [pc, #120]	; (11cc <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    1152:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    1154:	a902      	add	r1, sp, #8
	_dry_run = true;
    1156:	701e      	strb	r6, [r3, #0]
{
    1158:	0005      	movs	r5, r0
	uint32_t total = 0;
    115a:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    115c:	f7ff fc44 	bl	9e8 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1160:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    1162:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1164:	2209      	movs	r2, #9
    1166:	0039      	movs	r1, r7
    1168:	0020      	movs	r0, r4
    116a:	f001 f8e4 	bl	2336 <memset>
    116e:	2309      	movs	r3, #9
    1170:	7023      	strb	r3, [r4, #0]
    1172:	2302      	movs	r3, #2
    1174:	7063      	strb	r3, [r4, #1]
    1176:	339e      	adds	r3, #158	; 0x9e
    1178:	71e3      	strb	r3, [r4, #7]
    117a:	335a      	adds	r3, #90	; 0x5a
    117c:	7223      	strb	r3, [r4, #8]
    117e:	9b02      	ldr	r3, [sp, #8]
    1180:	7166      	strb	r6, [r4, #5]
    1182:	3309      	adds	r3, #9
    1184:	8063      	strh	r3, [r4, #2]
    1186:	466b      	mov	r3, sp
    1188:	791b      	ldrb	r3, [r3, #4]
    118a:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    118c:	4b0f      	ldr	r3, [pc, #60]	; (11cc <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    118e:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    1190:	9b00      	ldr	r3, [sp, #0]
    1192:	2b09      	cmp	r3, #9
    1194:	d107      	bne.n	11a6 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    1196:	001a      	movs	r2, r3
    1198:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    119a:	0028      	movs	r0, r5
    119c:	f7ff ff78 	bl	1090 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    11a0:	2001      	movs	r0, #1
    11a2:	b007      	add	sp, #28
    11a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    11a6:	4b0a      	ldr	r3, [pc, #40]	; (11d0 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    11a8:	2209      	movs	r2, #9
		_pack_message = true;
    11aa:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    11ac:	4e09      	ldr	r6, [pc, #36]	; (11d4 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    11ae:	0021      	movs	r1, r4
    11b0:	0028      	movs	r0, r5
	total = 0;
    11b2:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    11b4:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    11b6:	f7ff ff6b 	bl	1090 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    11ba:	a902      	add	r1, sp, #8
    11bc:	0028      	movs	r0, r5
    11be:	f7ff fc13 	bl	9e8 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    11c2:	4b03      	ldr	r3, [pc, #12]	; (11d0 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    11c4:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    11c6:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    11c8:	4903      	ldr	r1, [pc, #12]	; (11d8 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    11ca:	e7e6      	b.n	119a <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    11cc:	200004d0 	.word	0x200004d0
    11d0:	200005d1 	.word	0x200005d1
    11d4:	200005d2 	.word	0x200005d2
    11d8:	200004d1 	.word	0x200004d1

000011dc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    11dc:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    11de:	78ce      	ldrb	r6, [r1, #3]
{
    11e0:	b092      	sub	sp, #72	; 0x48
    11e2:	0005      	movs	r5, r0
    11e4:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    11e6:	2e02      	cmp	r6, #2
    11e8:	d108      	bne.n	11fc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    11ea:	88c9      	ldrh	r1, [r1, #6]
    11ec:	482b      	ldr	r0, [pc, #172]	; (129c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    11ee:	f7ff ffab 	bl	1148 <_ZN14USBDeviceClass17sendConfigurationEm>
    11f2:	1e43      	subs	r3, r0, #1
    11f4:	4198      	sbcs	r0, r3
    11f6:	b2c0      	uxtb	r0, r0
}
    11f8:	b012      	add	sp, #72	; 0x48
    11fa:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    11fc:	f000 ff9e 	bl	213c <_Z12PluggableUSBv>
    1200:	0021      	movs	r1, r4
    1202:	f000 ff6b 	bl	20dc <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    1206:	2800      	cmp	r0, #0
    1208:	d003      	beq.n	1212 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    120a:	17c3      	asrs	r3, r0, #31
    120c:	1a18      	subs	r0, r3, r0
    120e:	0fc0      	lsrs	r0, r0, #31
    1210:	e7f2      	b.n	11f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    1212:	2e01      	cmp	r6, #1
    1214:	d10b      	bne.n	122e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (setup.wLength == 8)
    1216:	88e2      	ldrh	r2, [r4, #6]
    1218:	4921      	ldr	r1, [pc, #132]	; (12a0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
		if (*desc_addr > setup.wLength) {
    121a:	2a11      	cmp	r2, #17
    121c:	dc10      	bgt.n	1240 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    121e:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    1220:	2a00      	cmp	r2, #0
    1222:	d00d      	beq.n	1240 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    1224:	0028      	movs	r0, r5
    1226:	f7ff ff33 	bl	1090 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    122a:	2001      	movs	r0, #1
    122c:	e7e4      	b.n	11f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    122e:	2e03      	cmp	r6, #3
    1230:	d1e2      	bne.n	11f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    1232:	78a3      	ldrb	r3, [r4, #2]
    1234:	2b00      	cmp	r3, #0
    1236:	d105      	bne.n	1244 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    1238:	88e2      	ldrh	r2, [r4, #6]
    123a:	491a      	ldr	r1, [pc, #104]	; (12a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    123c:	2a03      	cmp	r2, #3
    123e:	ddee      	ble.n	121e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    1240:	780a      	ldrb	r2, [r1, #0]
    1242:	e7ef      	b.n	1224 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    1244:	2b02      	cmp	r3, #2
    1246:	d105      	bne.n	1254 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    1248:	79a2      	ldrb	r2, [r4, #6]
    124a:	4917      	ldr	r1, [pc, #92]	; (12a8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    124c:	0028      	movs	r0, r5
    124e:	f7ff ff49 	bl	10e4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    1252:	e7d1      	b.n	11f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    1254:	2b01      	cmp	r3, #1
    1256:	d102      	bne.n	125e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1258:	79a2      	ldrb	r2, [r4, #6]
    125a:	4914      	ldr	r1, [pc, #80]	; (12ac <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    125c:	e7f6      	b.n	124c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    125e:	2b03      	cmp	r3, #3
    1260:	d1ca      	bne.n	11f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    1262:	4b13      	ldr	r3, [pc, #76]	; (12b0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    1264:	a901      	add	r1, sp, #4
    1266:	6818      	ldr	r0, [r3, #0]
    1268:	f7ff f9a2 	bl	5b0 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    126c:	4b11      	ldr	r3, [pc, #68]	; (12b4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    126e:	a903      	add	r1, sp, #12
    1270:	6818      	ldr	r0, [r3, #0]
    1272:	f7ff f99d 	bl	5b0 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    1276:	4b10      	ldr	r3, [pc, #64]	; (12b8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    1278:	a905      	add	r1, sp, #20
    127a:	6818      	ldr	r0, [r3, #0]
    127c:	f7ff f998 	bl	5b0 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    1280:	4b0e      	ldr	r3, [pc, #56]	; (12bc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    1282:	a907      	add	r1, sp, #28
    1284:	6818      	ldr	r0, [r3, #0]
    1286:	f7ff f993 	bl	5b0 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    128a:	f000 ff57 	bl	213c <_Z12PluggableUSBv>
    128e:	a909      	add	r1, sp, #36	; 0x24
    1290:	f000 ff34 	bl	20fc <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    1294:	79a2      	ldrb	r2, [r4, #6]
    1296:	a901      	add	r1, sp, #4
    1298:	e7d8      	b.n	124c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	20000124 	.word	0x20000124
    12a0:	00002548 	.word	0x00002548
    12a4:	00002538 	.word	0x00002538
    12a8:	00002528 	.word	0x00002528
    12ac:	0000253c 	.word	0x0000253c
    12b0:	0080a00c 	.word	0x0080a00c
    12b4:	0080a040 	.word	0x0080a040
    12b8:	0080a044 	.word	0x0080a044
    12bc:	0080a048 	.word	0x0080a048

000012c0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    12c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    12c2:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    12c4:	7848      	ldrb	r0, [r1, #1]
{
    12c6:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    12c8:	280b      	cmp	r0, #11
    12ca:	d811      	bhi.n	12f0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    12cc:	f000 ff5c 	bl	2188 <__gnu_thumb1_case_uqi>
    12d0:	2e101d06 	.word	0x2e101d06
    12d4:	70484310 	.word	0x70484310
    12d8:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    12dc:	7809      	ldrb	r1, [r1, #0]
    12de:	aa01      	add	r2, sp, #4
    12e0:	2900      	cmp	r1, #0
    12e2:	d107      	bne.n	12f4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    12e4:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    12e6:	7011      	strb	r1, [r2, #0]
    12e8:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    12ea:	0030      	movs	r0, r6
    12ec:	f7ff feac 	bl	1048 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    12f0:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    12f2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    12f4:	2300      	movs	r3, #0
    12f6:	7013      	strb	r3, [r2, #0]
    12f8:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    12fa:	4b2e      	ldr	r3, [pc, #184]	; (13b4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    12fc:	781b      	ldrb	r3, [r3, #0]
    12fe:	2b01      	cmp	r3, #1
    1300:	d100      	bne.n	1304 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    1302:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    1304:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    1306:	2100      	movs	r1, #0
    1308:	e7ef      	b.n	12ea <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    130a:	788a      	ldrb	r2, [r1, #2]
    130c:	2300      	movs	r3, #0
    130e:	2a01      	cmp	r2, #1
    1310:	d104      	bne.n	131c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    1312:	aa01      	add	r2, sp, #4
    1314:	7013      	strb	r3, [r2, #0]
    1316:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1318:	4b27      	ldr	r3, [pc, #156]	; (13b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    131a:	e7ef      	b.n	12fc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    131c:	4a25      	ldr	r2, [pc, #148]	; (13b4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    131e:	7013      	strb	r3, [r2, #0]
    1320:	4a26      	ldr	r2, [pc, #152]	; (13bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    1322:	6993      	ldr	r3, [r2, #24]
    1324:	0b9b      	lsrs	r3, r3, #14
    1326:	039b      	lsls	r3, r3, #14
    1328:	6193      	str	r3, [r2, #24]
    132a:	e7e1      	b.n	12f0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    132c:	788c      	ldrb	r4, [r1, #2]
    132e:	2c01      	cmp	r4, #1
    1330:	d106      	bne.n	1340 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    1332:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    1334:	4b20      	ldr	r3, [pc, #128]	; (13b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    1336:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    1338:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    133a:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    133c:	0023      	movs	r3, r4
    133e:	e7d4      	b.n	12ea <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    1340:	2c00      	cmp	r4, #0
    1342:	d108      	bne.n	1356 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    1344:	2001      	movs	r0, #1
    1346:	4b1b      	ldr	r3, [pc, #108]	; (13b4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    1348:	4a1c      	ldr	r2, [pc, #112]	; (13bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    134a:	7018      	strb	r0, [r3, #0]
    134c:	6993      	ldr	r3, [r2, #24]
    134e:	0b9b      	lsrs	r3, r3, #14
    1350:	039b      	lsls	r3, r3, #14
    1352:	6193      	str	r3, [r2, #24]
			return true;
    1354:	e7cd      	b.n	12f2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    1356:	78a9      	ldrb	r1, [r5, #2]
    1358:	0030      	movs	r0, r6
    135a:	f7ff fc0f 	bl	b7c <_ZN14USBDeviceClass10setAddressEm>
    135e:	e7c7      	b.n	12f0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    1360:	0030      	movs	r0, r6
    1362:	f7ff ff3b 	bl	11dc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    1366:	e7c4      	b.n	12f2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    1368:	2301      	movs	r3, #1
    136a:	4a15      	ldr	r2, [pc, #84]	; (13c0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    136c:	e7cb      	b.n	1306 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    136e:	780b      	ldrb	r3, [r1, #0]
			return false;
    1370:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1372:	06db      	lsls	r3, r3, #27
    1374:	d1bd      	bne.n	12f2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    1376:	0030      	movs	r0, r6
    1378:	f7ff fcbc 	bl	cf4 <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    137c:	202a      	movs	r0, #42	; 0x2a
    137e:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    1380:	78aa      	ldrb	r2, [r5, #2]
    1382:	4b0f      	ldr	r3, [pc, #60]	; (13c0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    1384:	30ff      	adds	r0, #255	; 0xff
    1386:	601a      	str	r2, [r3, #0]
    1388:	4a0c      	ldr	r2, [pc, #48]	; (13bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    138a:	6813      	ldr	r3, [r2, #0]
    138c:	5c1c      	ldrb	r4, [r3, r0]
    138e:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1390:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    1392:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1394:	34ff      	adds	r4, #255	; 0xff
    1396:	5d19      	ldrb	r1, [r3, r4]
    1398:	3829      	subs	r0, #41	; 0x29
    139a:	38ff      	subs	r0, #255	; 0xff
    139c:	4301      	orrs	r1, r0
    139e:	5519      	strb	r1, [r3, r4]
    13a0:	e7d4      	b.n	134c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    13a2:	2301      	movs	r3, #1
    13a4:	4a07      	ldr	r2, [pc, #28]	; (13c4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    13a6:	e7ae      	b.n	1306 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    13a8:	788a      	ldrb	r2, [r1, #2]
    13aa:	4b06      	ldr	r3, [pc, #24]	; (13c4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    13ac:	601a      	str	r2, [r3, #0]
    13ae:	e7b7      	b.n	1320 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    13b0:	2000      	movs	r0, #0
    13b2:	e79e      	b.n	12f2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    13b4:	20000146 	.word	0x20000146
    13b8:	2000014e 	.word	0x2000014e
    13bc:	200005dc 	.word	0x200005dc
    13c0:	200005d4 	.word	0x200005d4
    13c4:	200005d8 	.word	0x200005d8

000013c8 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    13c8:	4b4c      	ldr	r3, [pc, #304]	; (14fc <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
{
    13ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    13cc:	781c      	ldrb	r4, [r3, #0]
{
    13ce:	0007      	movs	r7, r0
	if (_pack_message == true) {
    13d0:	2c00      	cmp	r4, #0
    13d2:	d000      	beq.n	13d6 <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    13d4:	e07d      	b.n	14d2 <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    13d6:	4e4a      	ldr	r6, [pc, #296]	; (1500 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    13d8:	6833      	ldr	r3, [r6, #0]
    13da:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    13dc:	071b      	lsls	r3, r3, #28
    13de:	d50e      	bpl.n	13fe <_ZN14USBDeviceClass10ISRHandlerEv+0x36>
    13e0:	0021      	movs	r1, r4
    13e2:	0020      	movs	r0, r4
    13e4:	f7ff f90a 	bl	5fc <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    13e8:	6832      	ldr	r2, [r6, #0]
    13ea:	2310      	movs	r3, #16
    13ec:	0011      	movs	r1, r2
    13ee:	31ff      	adds	r1, #255	; 0xff
    13f0:	7a88      	ldrb	r0, [r1, #10]
    13f2:	4303      	orrs	r3, r0
    13f4:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    13f6:	4b43      	ldr	r3, [pc, #268]	; (1504 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    13f8:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    13fa:	2308      	movs	r3, #8
    13fc:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    13fe:	6833      	ldr	r3, [r6, #0]
    1400:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    1402:	0752      	lsls	r2, r2, #29
    1404:	d51f      	bpl.n	1446 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    1406:	2204      	movs	r2, #4
    1408:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    140a:	4a3f      	ldr	r2, [pc, #252]	; (1508 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    140c:	7813      	ldrb	r3, [r2, #0]
    140e:	2b00      	cmp	r3, #0
    1410:	d00a      	beq.n	1428 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
			txLEDPulse--;
    1412:	7813      	ldrb	r3, [r2, #0]
    1414:	3b01      	subs	r3, #1
    1416:	b2db      	uxtb	r3, r3
    1418:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    141a:	7813      	ldrb	r3, [r2, #0]
    141c:	2b00      	cmp	r3, #0
    141e:	d103      	bne.n	1428 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
				digitalWrite(PIN_LED_TXL, HIGH);
    1420:	2101      	movs	r1, #1
    1422:	201f      	movs	r0, #31
    1424:	f000 f980 	bl	1728 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    1428:	4a38      	ldr	r2, [pc, #224]	; (150c <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    142a:	7813      	ldrb	r3, [r2, #0]
    142c:	2b00      	cmp	r3, #0
    142e:	d00a      	beq.n	1446 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
			rxLEDPulse--;
    1430:	7813      	ldrb	r3, [r2, #0]
    1432:	3b01      	subs	r3, #1
    1434:	b2db      	uxtb	r3, r3
    1436:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    1438:	7813      	ldrb	r3, [r2, #0]
    143a:	2b00      	cmp	r3, #0
    143c:	d103      	bne.n	1446 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
				digitalWrite(PIN_LED_RXL, HIGH);
    143e:	2101      	movs	r1, #1
    1440:	201e      	movs	r0, #30
    1442:	f000 f971 	bl	1728 <digitalWrite>
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    1446:	6833      	ldr	r3, [r6, #0]
    1448:	33ff      	adds	r3, #255	; 0xff
    144a:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    144c:	06d2      	lsls	r2, r2, #27
    144e:	d520      	bpl.n	1492 <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    1450:	2210      	movs	r2, #16
    1452:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1454:	7959      	ldrb	r1, [r3, #5]
    1456:	3230      	adds	r2, #48	; 0x30
    1458:	430a      	orrs	r2, r1
    145a:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    145c:	2360      	movs	r3, #96	; 0x60
    145e:	492c      	ldr	r1, [pc, #176]	; (1510 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    1460:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    1462:	780a      	ldrb	r2, [r1, #0]
    1464:	421a      	tst	r2, r3
    1466:	d135      	bne.n	14d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x10c>
			ok = handleStandardSetup(*setup);
    1468:	f7ff ff2a 	bl	12c0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    146c:	2800      	cmp	r0, #0
    146e:	d034      	beq.n	14da <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1470:	2280      	movs	r2, #128	; 0x80
    1472:	6833      	ldr	r3, [r6, #0]
    1474:	4252      	negs	r2, r2
    1476:	33ff      	adds	r3, #255	; 0xff
    1478:	7999      	ldrb	r1, [r3, #6]
    147a:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    147c:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    147e:	6833      	ldr	r3, [r6, #0]
    1480:	33ff      	adds	r3, #255	; 0xff
    1482:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    1484:	0652      	lsls	r2, r2, #25
    1486:	d504      	bpl.n	1492 <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    1488:	2240      	movs	r2, #64	; 0x40
    148a:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    148c:	7a59      	ldrb	r1, [r3, #9]
    148e:	430a      	orrs	r2, r1
    1490:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    1492:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    1494:	2500      	movs	r5, #0
    1496:	8c1c      	ldrh	r4, [r3, #32]
    1498:	2301      	movs	r3, #1
    149a:	439c      	bics	r4, r3
    149c:	b2e4      	uxtb	r4, r4
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    149e:	9301      	str	r3, [sp, #4]
    14a0:	b2e9      	uxtb	r1, r5
	while (ept_int != 0)
    14a2:	2c00      	cmp	r4, #0
    14a4:	d015      	beq.n	14d2 <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
		if ((ept_int & (1 << i)) != 0)
    14a6:	0023      	movs	r3, r4
    14a8:	412b      	asrs	r3, r5
    14aa:	9a01      	ldr	r2, [sp, #4]
    14ac:	4213      	tst	r3, r2
    14ae:	d00d      	beq.n	14cc <_ZN14USBDeviceClass10ISRHandlerEv+0x104>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    14b0:	002b      	movs	r3, r5
    14b2:	6832      	ldr	r2, [r6, #0]
    14b4:	3308      	adds	r3, #8
    14b6:	015b      	lsls	r3, r3, #5
    14b8:	18d3      	adds	r3, r2, r3
    14ba:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    14bc:	07d2      	lsls	r2, r2, #31
    14be:	d413      	bmi.n	14e8 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    14c0:	79db      	ldrb	r3, [r3, #7]
    14c2:	079b      	lsls	r3, r3, #30
    14c4:	d410      	bmi.n	14e8 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    14c6:	9b01      	ldr	r3, [sp, #4]
    14c8:	40ab      	lsls	r3, r5
    14ca:	439c      	bics	r4, r3
    14cc:	3501      	adds	r5, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    14ce:	2d09      	cmp	r5, #9
    14d0:	d1e6      	bne.n	14a0 <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
			break;  // fire exit
	}
}
    14d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(*setup);
    14d4:	f7ff fb76 	bl	bc4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    14d8:	e7c8      	b.n	146c <_ZN14USBDeviceClass10ISRHandlerEv+0xa4>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    14da:	2220      	movs	r2, #32
    14dc:	4b0d      	ldr	r3, [pc, #52]	; (1514 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    14de:	e7cd      	b.n	147c <_ZN14USBDeviceClass10ISRHandlerEv+0xb4>
					epHandlers[i]->handleEndpoint();
    14e0:	6803      	ldr	r3, [r0, #0]
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	4798      	blx	r3
    14e6:	e7ee      	b.n	14c6 <_ZN14USBDeviceClass10ISRHandlerEv+0xfe>
				if (epHandlers[i]) {
    14e8:	4b0b      	ldr	r3, [pc, #44]	; (1518 <_ZN14USBDeviceClass10ISRHandlerEv+0x150>)
    14ea:	00aa      	lsls	r2, r5, #2
    14ec:	58d0      	ldr	r0, [r2, r3]
    14ee:	2800      	cmp	r0, #0
    14f0:	d1f6      	bne.n	14e0 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
					handleEndpoint(i);
    14f2:	0038      	movs	r0, r7
    14f4:	f7ff fa8e 	bl	a14 <_ZN14USBDeviceClass14handleEndpointEh>
    14f8:	e7e5      	b.n	14c6 <_ZN14USBDeviceClass10ISRHandlerEv+0xfe>
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	200005d1 	.word	0x200005d1
    1500:	200005dc 	.word	0x200005dc
    1504:	200005d4 	.word	0x200005d4
    1508:	20000145 	.word	0x20000145
    150c:	20000144 	.word	0x20000144
    1510:	20000310 	.word	0x20000310
    1514:	410050ff 	.word	0x410050ff
    1518:	20000128 	.word	0x20000128

0000151c <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    151c:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    151e:	4802      	ldr	r0, [pc, #8]	; (1528 <UDD_Handler+0xc>)
    1520:	f7ff ff52 	bl	13c8 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    1524:	bd10      	pop	{r4, pc}
    1526:	46c0      	nop			; (mov r8, r8)
    1528:	20000124 	.word	0x20000124

0000152c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    152c:	4a01      	ldr	r2, [pc, #4]	; (1534 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    152e:	4b02      	ldr	r3, [pc, #8]	; (1538 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    1530:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1532:	4770      	bx	lr
    1534:	41005000 	.word	0x41005000
    1538:	200005dc 	.word	0x200005dc

0000153c <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    153c:	21fa      	movs	r1, #250	; 0xfa
    153e:	4b31      	ldr	r3, [pc, #196]	; (1604 <init+0xc8>)
{
    1540:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1542:	6818      	ldr	r0, [r3, #0]
    1544:	0089      	lsls	r1, r1, #2
    1546:	f000 fe29 	bl	219c <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    154a:	4b2f      	ldr	r3, [pc, #188]	; (1608 <init+0xcc>)
    154c:	3801      	subs	r0, #1
    154e:	4298      	cmp	r0, r3
    1550:	d856      	bhi.n	1600 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1552:	492e      	ldr	r1, [pc, #184]	; (160c <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1554:	4a2e      	ldr	r2, [pc, #184]	; (1610 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1556:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1558:	20c0      	movs	r0, #192	; 0xc0
    155a:	6a13      	ldr	r3, [r2, #32]
    155c:	0600      	lsls	r0, r0, #24
    155e:	021b      	lsls	r3, r3, #8
    1560:	0a1b      	lsrs	r3, r3, #8
    1562:	4303      	orrs	r3, r0
    1564:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1566:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1568:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    156a:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    156c:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    156e:	2180      	movs	r1, #128	; 0x80
    1570:	6a13      	ldr	r3, [r2, #32]
    1572:	0609      	lsls	r1, r1, #24
    1574:	021b      	lsls	r3, r3, #8
    1576:	0a1b      	lsrs	r3, r3, #8
    1578:	430b      	orrs	r3, r1
    157a:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    157c:	22fc      	movs	r2, #252	; 0xfc
    157e:	4b25      	ldr	r3, [pc, #148]	; (1614 <init+0xd8>)
    1580:	6a19      	ldr	r1, [r3, #32]
    1582:	430a      	orrs	r2, r1
    1584:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1586:	22fc      	movs	r2, #252	; 0xfc
    1588:	6a19      	ldr	r1, [r3, #32]
    158a:	0192      	lsls	r2, r2, #6
    158c:	430a      	orrs	r2, r1
    158e:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1590:	22a0      	movs	r2, #160	; 0xa0
    1592:	6a19      	ldr	r1, [r3, #32]
    1594:	02d2      	lsls	r2, r2, #11
    1596:	430a      	orrs	r2, r1
    1598:	621a      	str	r2, [r3, #32]

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    159a:	0020      	movs	r0, r4
    159c:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    159e:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    15a0:	f000 f876 	bl	1690 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    15a4:	2c13      	cmp	r4, #19
    15a6:	d1f8      	bne.n	159a <init+0x5e>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    15a8:	4b1b      	ldr	r3, [pc, #108]	; (1618 <init+0xdc>)
    15aa:	001c      	movs	r4, r3
    15ac:	785a      	ldrb	r2, [r3, #1]
    15ae:	b252      	sxtb	r2, r2
    15b0:	2a00      	cmp	r2, #0
    15b2:	dbfb      	blt.n	15ac <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    15b4:	4a19      	ldr	r2, [pc, #100]	; (161c <init+0xe0>)
    15b6:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    15b8:	4b19      	ldr	r3, [pc, #100]	; (1620 <init+0xe4>)
    15ba:	001a      	movs	r2, r3
    15bc:	7e59      	ldrb	r1, [r3, #25]
    15be:	09c9      	lsrs	r1, r1, #7
    15c0:	2901      	cmp	r1, #1
    15c2:	d0fb      	beq.n	15bc <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    15c4:	21e4      	movs	r1, #228	; 0xe4
    15c6:	00c9      	lsls	r1, r1, #3
    15c8:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    15ca:	213f      	movs	r1, #63	; 0x3f
    15cc:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    15ce:	7e53      	ldrb	r3, [r2, #25]
    15d0:	09db      	lsrs	r3, r3, #7
    15d2:	2b01      	cmp	r3, #1
    15d4:	d0fb      	beq.n	15ce <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    15d6:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    15d8:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    15da:	015b      	lsls	r3, r3, #5
    15dc:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    15de:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    15e0:	f000 f824 	bl	162c <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    15e4:	7863      	ldrb	r3, [r4, #1]
    15e6:	b25b      	sxtb	r3, r3
    15e8:	2b00      	cmp	r3, #0
    15ea:	dbfb      	blt.n	15e4 <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    15ec:	4b0d      	ldr	r3, [pc, #52]	; (1624 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    15ee:	4a0e      	ldr	r2, [pc, #56]	; (1628 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    15f0:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    15f2:	79d3      	ldrb	r3, [r2, #7]
    15f4:	09db      	lsrs	r3, r3, #7
    15f6:	2b01      	cmp	r3, #1
    15f8:	d0fb      	beq.n	15f2 <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    15fa:	2341      	movs	r3, #65	; 0x41
    15fc:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    15fe:	bd10      	pop	{r4, pc}
    1600:	e7fe      	b.n	1600 <init+0xc4>
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	2000002c 	.word	0x2000002c
    1608:	00ffffff 	.word	0x00ffffff
    160c:	e000e010 	.word	0xe000e010
    1610:	e000ed00 	.word	0xe000ed00
    1614:	40000400 	.word	0x40000400
    1618:	40000c00 	.word	0x40000c00
    161c:	0000401e 	.word	0x0000401e
    1620:	42004000 	.word	0x42004000
    1624:	00004021 	.word	0x00004021
    1628:	42004800 	.word	0x42004800

0000162c <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    162c:	4a16      	ldr	r2, [pc, #88]	; (1688 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    162e:	b500      	push	{lr}
    1630:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1632:	7e51      	ldrb	r1, [r2, #25]
    1634:	09c9      	lsrs	r1, r1, #7
    1636:	2901      	cmp	r1, #1
    1638:	d0fb      	beq.n	1632 <analogReference+0x6>
  syncADC();
  switch (mode)
    163a:	3801      	subs	r0, #1
    163c:	2804      	cmp	r0, #4
    163e:	d816      	bhi.n	166e <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1640:	6919      	ldr	r1, [r3, #16]
    1642:	4a12      	ldr	r2, [pc, #72]	; (168c <analogReference+0x60>)
    1644:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1646:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1648:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    164a:	785a      	ldrb	r2, [r3, #1]
    164c:	438a      	bics	r2, r1
  switch (mode)
    164e:	f000 fd9b 	bl	2188 <__gnu_thumb1_case_uqi>
    1652:	0803      	.short	0x0803
    1654:	0b06      	.short	0x0b06
    1656:	03          	.byte	0x03
    1657:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    1658:	0011      	movs	r1, r2
    165a:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    165c:	430a      	orrs	r2, r1
    165e:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    1660:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    1662:	0011      	movs	r1, r2
    1664:	2203      	movs	r2, #3
    1666:	e7f9      	b.n	165c <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1668:	0011      	movs	r1, r2
    166a:	2202      	movs	r2, #2
    166c:	e7f6      	b.n	165c <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    166e:	23f0      	movs	r3, #240	; 0xf0
    1670:	6911      	ldr	r1, [r2, #16]
    1672:	051b      	lsls	r3, r3, #20
    1674:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1676:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1678:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    167a:	7853      	ldrb	r3, [r2, #1]
    167c:	438b      	bics	r3, r1
    167e:	0019      	movs	r1, r3
    1680:	2302      	movs	r3, #2
    1682:	430b      	orrs	r3, r1
    1684:	7053      	strb	r3, [r2, #1]
}
    1686:	e7eb      	b.n	1660 <analogReference+0x34>
    1688:	42004000 	.word	0x42004000
    168c:	f0ffffff 	.word	0xf0ffffff

00001690 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1690:	2318      	movs	r3, #24
{
    1692:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1694:	001d      	movs	r5, r3
{
    1696:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1698:	4345      	muls	r5, r0
    169a:	2008      	movs	r0, #8
    169c:	4a20      	ldr	r2, [pc, #128]	; (1720 <pinMode+0x90>)
    169e:	1955      	adds	r5, r2, r5
    16a0:	5628      	ldrsb	r0, [r5, r0]
    16a2:	3001      	adds	r0, #1
    16a4:	d014      	beq.n	16d0 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    16a6:	2903      	cmp	r1, #3
    16a8:	d812      	bhi.n	16d0 <pinMode+0x40>
    16aa:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    16ac:	4363      	muls	r3, r4
    16ae:	56d1      	ldrsb	r1, [r2, r3]
    16b0:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    16b2:	f000 fd69 	bl	2188 <__gnu_thumb1_case_uqi>
    16b6:	2802      	.short	0x2802
    16b8:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    16ba:	6858      	ldr	r0, [r3, #4]
    16bc:	01cb      	lsls	r3, r1, #7
    16be:	2102      	movs	r1, #2
    16c0:	4a18      	ldr	r2, [pc, #96]	; (1724 <pinMode+0x94>)
    16c2:	189b      	adds	r3, r3, r2
    16c4:	181a      	adds	r2, r3, r0
    16c6:	3240      	adds	r2, #64	; 0x40
    16c8:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16ca:	2201      	movs	r2, #1
    16cc:	4082      	lsls	r2, r0
    16ce:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    16d0:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    16d2:	6858      	ldr	r0, [r3, #4]
    16d4:	01cb      	lsls	r3, r1, #7
    16d6:	2106      	movs	r1, #6
    16d8:	4a12      	ldr	r2, [pc, #72]	; (1724 <pinMode+0x94>)
    16da:	189b      	adds	r3, r3, r2
    16dc:	181a      	adds	r2, r3, r0
    16de:	3240      	adds	r2, #64	; 0x40
    16e0:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16e2:	2201      	movs	r2, #1
    16e4:	4082      	lsls	r2, r0
    16e6:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16e8:	619a      	str	r2, [r3, #24]
    break ;
    16ea:	e7f1      	b.n	16d0 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    16ec:	6858      	ldr	r0, [r3, #4]
    16ee:	01cb      	lsls	r3, r1, #7
    16f0:	2106      	movs	r1, #6
    16f2:	4a0c      	ldr	r2, [pc, #48]	; (1724 <pinMode+0x94>)
    16f4:	189b      	adds	r3, r3, r2
    16f6:	181a      	adds	r2, r3, r0
    16f8:	3240      	adds	r2, #64	; 0x40
    16fa:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16fc:	2201      	movs	r2, #1
    16fe:	4082      	lsls	r2, r0
    1700:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1702:	615a      	str	r2, [r3, #20]
    break ;
    1704:	e7e4      	b.n	16d0 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1706:	6858      	ldr	r0, [r3, #4]
    1708:	01cb      	lsls	r3, r1, #7
    170a:	2102      	movs	r1, #2
    170c:	4a05      	ldr	r2, [pc, #20]	; (1724 <pinMode+0x94>)
    170e:	189b      	adds	r3, r3, r2
    1710:	181a      	adds	r2, r3, r0
    1712:	3240      	adds	r2, #64	; 0x40
    1714:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1716:	2201      	movs	r2, #1
    1718:	4082      	lsls	r2, r0
    171a:	609a      	str	r2, [r3, #8]
    break ;
    171c:	e7d8      	b.n	16d0 <pinMode+0x40>
    171e:	46c0      	nop			; (mov r8, r8)
    1720:	0000255c 	.word	0x0000255c
    1724:	41004400 	.word	0x41004400

00001728 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1728:	2318      	movs	r3, #24
{
    172a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    172c:	2408      	movs	r4, #8
    172e:	4358      	muls	r0, r3
    1730:	4a11      	ldr	r2, [pc, #68]	; (1778 <digitalWrite+0x50>)
    1732:	1813      	adds	r3, r2, r0
    1734:	571c      	ldrsb	r4, [r3, r4]
    1736:	3401      	adds	r4, #1
    1738:	d01b      	beq.n	1772 <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    173a:	2601      	movs	r6, #1
    173c:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    173e:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1740:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    1742:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1744:	4a0d      	ldr	r2, [pc, #52]	; (177c <digitalWrite+0x54>)
    1746:	01db      	lsls	r3, r3, #7
    1748:	189a      	adds	r2, r3, r2
    174a:	6890      	ldr	r0, [r2, #8]
    174c:	4228      	tst	r0, r5
    174e:	d10b      	bne.n	1768 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    1750:	000c      	movs	r4, r1
    1752:	1e60      	subs	r0, r4, #1
    1754:	4184      	sbcs	r4, r0
    1756:	19d2      	adds	r2, r2, r7
    1758:	3240      	adds	r2, #64	; 0x40
    175a:	7810      	ldrb	r0, [r2, #0]
    175c:	4034      	ands	r4, r6
    175e:	3603      	adds	r6, #3
    1760:	00a4      	lsls	r4, r4, #2
    1762:	43b0      	bics	r0, r6
    1764:	4320      	orrs	r0, r4
    1766:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    1768:	4a04      	ldr	r2, [pc, #16]	; (177c <digitalWrite+0x54>)
    176a:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    176c:	2900      	cmp	r1, #0
    176e:	d101      	bne.n	1774 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    1770:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    1772:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    1774:	619d      	str	r5, [r3, #24]
    break ;
    1776:	e7fc      	b.n	1772 <digitalWrite+0x4a>
    1778:	0000255c 	.word	0x0000255c
    177c:	41004400 	.word	0x41004400

00001780 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    1780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1782:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1784:	2018      	movs	r0, #24
    1786:	4358      	muls	r0, r3
    1788:	4a2a      	ldr	r2, [pc, #168]	; (1834 <pinPeripheral+0xb4>)
    178a:	1810      	adds	r0, r2, r0
    178c:	7a00      	ldrb	r0, [r0, #8]
    178e:	b240      	sxtb	r0, r0
  {
    return -1 ;
    1790:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1792:	3001      	adds	r0, #1
    1794:	d013      	beq.n	17be <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    1796:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    1798:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    179a:	280c      	cmp	r0, #12
    179c:	d80f      	bhi.n	17be <pinPeripheral+0x3e>
    179e:	f000 fcf3 	bl	2188 <__gnu_thumb1_case_uqi>
    17a2:	1c45      	.short	0x1c45
    17a4:	1c1c1c1c 	.word	0x1c1c1c1c
    17a8:	071c1c1c 	.word	0x071c1c1c
    17ac:	0707      	.short	0x0707
    17ae:	07          	.byte	0x07
    17af:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    17b0:	2909      	cmp	r1, #9
    17b2:	d106      	bne.n	17c2 <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    17b4:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    17b6:	0018      	movs	r0, r3
    17b8:	f7ff ff6a 	bl	1690 <pinMode>
  return 0l ;
    17bc:	2400      	movs	r4, #0
}
    17be:	0020      	movs	r0, r4
    17c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    17c2:	290a      	cmp	r1, #10
    17c4:	d101      	bne.n	17ca <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    17c6:	3908      	subs	r1, #8
    17c8:	e7f5      	b.n	17b6 <pinPeripheral+0x36>
  return 0l ;
    17ca:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    17cc:	290b      	cmp	r1, #11
    17ce:	d1f6      	bne.n	17be <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    17d0:	390a      	subs	r1, #10
    17d2:	0018      	movs	r0, r3
    17d4:	f7ff ff5c 	bl	1690 <pinMode>
    17d8:	e7f1      	b.n	17be <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    17da:	2018      	movs	r0, #24
    17dc:	4343      	muls	r3, r0
    17de:	18d0      	adds	r0, r2, r3
    17e0:	6846      	ldr	r6, [r0, #4]
    17e2:	2501      	movs	r5, #1
    17e4:	0034      	movs	r4, r6
    17e6:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    17e8:	4813      	ldr	r0, [pc, #76]	; (1838 <pinPeripheral+0xb8>)
    17ea:	01d2      	lsls	r2, r2, #7
    17ec:	1812      	adds	r2, r2, r0
    17ee:	0873      	lsrs	r3, r6, #1
    17f0:	18d3      	adds	r3, r2, r3
    17f2:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    17f4:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    17f6:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    17f8:	2c00      	cmp	r4, #0
    17fa:	d00b      	beq.n	1814 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    17fc:	240f      	movs	r4, #15
    17fe:	0109      	lsls	r1, r1, #4
    1800:	4020      	ands	r0, r4
    1802:	4301      	orrs	r1, r0
    1804:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    1806:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    1808:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    180a:	3240      	adds	r2, #64	; 0x40
    180c:	7813      	ldrb	r3, [r2, #0]
    180e:	431d      	orrs	r5, r3
    1810:	7015      	strb	r5, [r2, #0]
    1812:	e7d3      	b.n	17bc <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    1814:	270f      	movs	r7, #15
    1816:	43b8      	bics	r0, r7
    1818:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    181a:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    181c:	b2c9      	uxtb	r1, r1
    181e:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    1820:	0013      	movs	r3, r2
    1822:	3340      	adds	r3, #64	; 0x40
    1824:	781a      	ldrb	r2, [r3, #0]
    1826:	4315      	orrs	r5, r2
    1828:	701d      	strb	r5, [r3, #0]
    182a:	e7c8      	b.n	17be <pinPeripheral+0x3e>
      return -1l ;
    182c:	2401      	movs	r4, #1
    182e:	4264      	negs	r4, r4
    1830:	e7c5      	b.n	17be <pinPeripheral+0x3e>
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	0000255c 	.word	0x0000255c
    1838:	41004400 	.word	0x41004400

0000183c <vNopDelayMS>:

// will delay the processors using nops
// this is used when the rtos has crashed and we cannot use more advanced timing
void vNopDelayMS(unsigned long millis) 
{
  unsigned long iterations = millis * CAL_FACTOR;
    183c:	23fa      	movs	r3, #250	; 0xfa
    183e:	015b      	lsls	r3, r3, #5
    1840:	4358      	muls	r0, r3
  unsigned long i;
  for(i = 0; i < iterations; ++i) 
    1842:	2300      	movs	r3, #0
    1844:	4283      	cmp	r3, r0
    1846:	d100      	bne.n	184a <vNopDelayMS+0xe>
  {
    asm volatile("nop\n\t");
  }
}
    1848:	4770      	bx	lr
    asm volatile("nop\n\t");
    184a:	46c0      	nop			; (mov r8, r8)
  for(i = 0; i < iterations; ++i) 
    184c:	3301      	adds	r3, #1
    184e:	e7f9      	b.n	1844 <vNopDelayMS+0x8>

00001850 <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    1850:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    1852:	4802      	ldr	r0, [pc, #8]	; (185c <SERCOM0_Handler+0xc>)
    1854:	f000 faa1 	bl	1d9a <_ZN4Uart10IrqHandlerEv>
}
    1858:	bd10      	pop	{r4, pc}
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	2000091c 	.word	0x2000091c

00001860 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    1860:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    1862:	4802      	ldr	r0, [pc, #8]	; (186c <SERCOM5_Handler+0xc>)
    1864:	f000 fa99 	bl	1d9a <_ZN4Uart10IrqHandlerEv>
}
    1868:	bd10      	pop	{r4, pc}
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	200006e0 	.word	0x200006e0

00001870 <_GLOBAL__sub_I_g_APinDescription>:
    1870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    1872:	2401      	movs	r4, #1
    1874:	2603      	movs	r6, #3
SERCOM sercom0( SERCOM0 ) ;
    1876:	4f15      	ldr	r7, [pc, #84]	; (18cc <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    1878:	4915      	ldr	r1, [pc, #84]	; (18d0 <_GLOBAL__sub_I_g_APinDescription+0x60>)
    187a:	0038      	movs	r0, r7
    187c:	f000 f842 	bl	1904 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    1880:	4914      	ldr	r1, [pc, #80]	; (18d4 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    1882:	4815      	ldr	r0, [pc, #84]	; (18d8 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    1884:	f000 f83e 	bl	1904 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    1888:	4914      	ldr	r1, [pc, #80]	; (18dc <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    188a:	4815      	ldr	r0, [pc, #84]	; (18e0 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    188c:	f000 f83a 	bl	1904 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    1890:	4914      	ldr	r1, [pc, #80]	; (18e4 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    1892:	4815      	ldr	r0, [pc, #84]	; (18e8 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    1894:	f000 f836 	bl	1904 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    1898:	4914      	ldr	r1, [pc, #80]	; (18ec <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    189a:	4815      	ldr	r0, [pc, #84]	; (18f0 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    189c:	f000 f832 	bl	1904 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    18a0:	4d14      	ldr	r5, [pc, #80]	; (18f4 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    18a2:	4915      	ldr	r1, [pc, #84]	; (18f8 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    18a4:	0028      	movs	r0, r5
    18a6:	f000 f82d 	bl	1904 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    18aa:	0039      	movs	r1, r7
    18ac:	9600      	str	r6, [sp, #0]
    18ae:	0023      	movs	r3, r4
    18b0:	9401      	str	r4, [sp, #4]
    18b2:	2200      	movs	r2, #0
    18b4:	4811      	ldr	r0, [pc, #68]	; (18fc <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    18b6:	f000 fa05 	bl	1cc4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    18ba:	9600      	str	r6, [sp, #0]
    18bc:	0029      	movs	r1, r5
    18be:	9401      	str	r4, [sp, #4]
    18c0:	2323      	movs	r3, #35	; 0x23
    18c2:	2224      	movs	r2, #36	; 0x24
    18c4:	480e      	ldr	r0, [pc, #56]	; (1900 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    18c6:	f000 f9fd 	bl	1cc4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
    18ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    18cc:	20000b58 	.word	0x20000b58
    18d0:	42000800 	.word	0x42000800
    18d4:	42000c00 	.word	0x42000c00
    18d8:	20000b5c 	.word	0x20000b5c
    18dc:	42001000 	.word	0x42001000
    18e0:	20000b60 	.word	0x20000b60
    18e4:	42001400 	.word	0x42001400
    18e8:	20000b64 	.word	0x20000b64
    18ec:	42001800 	.word	0x42001800
    18f0:	20000b68 	.word	0x20000b68
    18f4:	20000b6c 	.word	0x20000b6c
    18f8:	42001c00 	.word	0x42001c00
    18fc:	2000091c 	.word	0x2000091c
    1900:	200006e0 	.word	0x200006e0

00001904 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    1904:	6001      	str	r1, [r0, #0]
}
    1906:	4770      	bx	lr

00001908 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    1908:	b5f0      	push	{r4, r5, r6, r7, lr}
    190a:	ac05      	add	r4, sp, #20
    190c:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    190e:	6804      	ldr	r4, [r0, #0]
    1910:	1e98      	subs	r0, r3, #2
    1912:	1e47      	subs	r7, r0, #1
    1914:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    1916:	6826      	ldr	r6, [r4, #0]
    1918:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    191a:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    191c:	4332      	orrs	r2, r6
    191e:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    1920:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    1922:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    1924:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    1926:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    1928:	6862      	ldr	r2, [r4, #4]
    192a:	4329      	orrs	r1, r5
    192c:	2000      	movs	r0, #0
    192e:	2b02      	cmp	r3, #2
    1930:	d000      	beq.n	1934 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    1932:	0358      	lsls	r0, r3, #13
    1934:	4311      	orrs	r1, r2
    1936:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    1938:	6061      	str	r1, [r4, #4]
}
    193a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000193c <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    193c:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    193e:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    1940:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    1942:	03a4      	lsls	r4, r4, #14
    1944:	6818      	ldr	r0, [r3, #0]
    1946:	0512      	lsls	r2, r2, #20
    1948:	4022      	ands	r2, r4
    194a:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    194c:	20c0      	movs	r0, #192	; 0xc0
    194e:	0409      	lsls	r1, r1, #16
    1950:	0280      	lsls	r0, r0, #10
    1952:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    1954:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    1956:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    1958:	685a      	ldr	r2, [r3, #4]
    195a:	4310      	orrs	r0, r2
    195c:	6058      	str	r0, [r3, #4]
}
    195e:	bd10      	pop	{r4, pc}

00001960 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    1960:	2201      	movs	r2, #1
    1962:	6803      	ldr	r3, [r0, #0]
    1964:	6819      	ldr	r1, [r3, #0]
    1966:	430a      	orrs	r2, r1
    1968:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    196a:	681a      	ldr	r2, [r3, #0]
    196c:	07d2      	lsls	r2, r2, #31
    196e:	d4fc      	bmi.n	196a <_ZN6SERCOM9resetUARTEv+0xa>
    1970:	69da      	ldr	r2, [r3, #28]
    1972:	07d2      	lsls	r2, r2, #31
    1974:	d4f9      	bmi.n	196a <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    1976:	4770      	bx	lr

00001978 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    1978:	2202      	movs	r2, #2
    197a:	6803      	ldr	r3, [r0, #0]
    197c:	6819      	ldr	r1, [r3, #0]
    197e:	430a      	orrs	r2, r1
    1980:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    1982:	69da      	ldr	r2, [r3, #28]
    1984:	0792      	lsls	r2, r2, #30
    1986:	d4fc      	bmi.n	1982 <_ZN6SERCOM10enableUARTEv+0xa>
}
    1988:	4770      	bx	lr

0000198a <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    198a:	6803      	ldr	r3, [r0, #0]
    198c:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    198e:	07d2      	lsls	r2, r2, #31
    1990:	d402      	bmi.n	1998 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    1992:	7e1a      	ldrb	r2, [r3, #24]
    1994:	0792      	lsls	r2, r2, #30
    1996:	d5fc      	bpl.n	1992 <_ZN6SERCOM9flushUARTEv+0x8>
}
    1998:	4770      	bx	lr

0000199a <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    199a:	2200      	movs	r2, #0
    199c:	6803      	ldr	r3, [r0, #0]
    199e:	835a      	strh	r2, [r3, #26]
}
    19a0:	4770      	bx	lr

000019a2 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    19a2:	6803      	ldr	r3, [r0, #0]
    19a4:	7e18      	ldrb	r0, [r3, #24]
    19a6:	0740      	lsls	r0, r0, #29
    19a8:	0fc0      	lsrs	r0, r0, #31
}
    19aa:	4770      	bx	lr

000019ac <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    19ac:	6803      	ldr	r3, [r0, #0]
    19ae:	7e18      	ldrb	r0, [r3, #24]
    19b0:	09c0      	lsrs	r0, r0, #7
}
    19b2:	4770      	bx	lr

000019b4 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    19b4:	2380      	movs	r3, #128	; 0x80
    19b6:	6802      	ldr	r2, [r0, #0]
    19b8:	425b      	negs	r3, r3
    19ba:	7e11      	ldrb	r1, [r2, #24]
    19bc:	430b      	orrs	r3, r1
    19be:	7613      	strb	r3, [r2, #24]
}
    19c0:	4770      	bx	lr

000019c2 <_ZN6SERCOM16isFrameErrorUARTEv>:
  return sercom->USART.STATUS.bit.FERR;
    19c2:	6803      	ldr	r3, [r0, #0]
    19c4:	8b58      	ldrh	r0, [r3, #26]
    19c6:	0780      	lsls	r0, r0, #30
    19c8:	0fc0      	lsrs	r0, r0, #31
}
    19ca:	4770      	bx	lr

000019cc <_ZN6SERCOM19clearFrameErrorUARTEv>:
  sercom->USART.STATUS.bit.FERR = 1;
    19cc:	2302      	movs	r3, #2
    19ce:	6802      	ldr	r2, [r0, #0]
    19d0:	8b51      	ldrh	r1, [r2, #26]
    19d2:	430b      	orrs	r3, r1
    19d4:	8353      	strh	r3, [r2, #26]
}
    19d6:	4770      	bx	lr

000019d8 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    19d8:	6803      	ldr	r3, [r0, #0]
    19da:	7e18      	ldrb	r0, [r3, #24]
    19dc:	07c0      	lsls	r0, r0, #31
    19de:	0fc0      	lsrs	r0, r0, #31
}
    19e0:	4770      	bx	lr

000019e2 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    19e2:	6803      	ldr	r3, [r0, #0]
    19e4:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    19e6:	b2c0      	uxtb	r0, r0
}
    19e8:	4770      	bx	lr

000019ea <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    19ea:	6803      	ldr	r3, [r0, #0]
    19ec:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    19ee:	07d2      	lsls	r2, r2, #31
    19f0:	d5fc      	bpl.n	19ec <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    19f2:	b289      	uxth	r1, r1
  return 1;
}
    19f4:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    19f6:	8519      	strh	r1, [r3, #40]	; 0x28
}
    19f8:	4770      	bx	lr

000019fa <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    19fa:	2201      	movs	r2, #1
    19fc:	6803      	ldr	r3, [r0, #0]
    19fe:	759a      	strb	r2, [r3, #22]
}
    1a00:	4770      	bx	lr

00001a02 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    1a02:	2201      	movs	r2, #1
    1a04:	6803      	ldr	r3, [r0, #0]
    1a06:	751a      	strb	r2, [r3, #20]
}
    1a08:	4770      	bx	lr
	...

00001a0c <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    1a0c:	6803      	ldr	r3, [r0, #0]
    1a0e:	4a21      	ldr	r2, [pc, #132]	; (1a94 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    1a10:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    1a12:	4293      	cmp	r3, r2
    1a14:	d011      	beq.n	1a3a <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    1a16:	4a20      	ldr	r2, [pc, #128]	; (1a98 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    1a18:	4293      	cmp	r3, r2
    1a1a:	d02f      	beq.n	1a7c <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    1a1c:	4a1f      	ldr	r2, [pc, #124]	; (1a9c <_ZN6SERCOM13initClockNVICEv+0x90>)
    1a1e:	4293      	cmp	r3, r2
    1a20:	d02f      	beq.n	1a82 <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    1a22:	4a1f      	ldr	r2, [pc, #124]	; (1aa0 <_ZN6SERCOM13initClockNVICEv+0x94>)
    1a24:	4293      	cmp	r3, r2
    1a26:	d02f      	beq.n	1a88 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    1a28:	4a1e      	ldr	r2, [pc, #120]	; (1aa4 <_ZN6SERCOM13initClockNVICEv+0x98>)
    1a2a:	4293      	cmp	r3, r2
    1a2c:	d02f      	beq.n	1a8e <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    1a2e:	4a1e      	ldr	r2, [pc, #120]	; (1aa8 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    1a30:	4293      	cmp	r3, r2
    1a32:	d122      	bne.n	1a7a <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    1a34:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    1a36:	2219      	movs	r2, #25
    1a38:	e001      	b.n	1a3e <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    1a3a:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    1a3c:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a3e:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1a40:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a42:	4099      	lsls	r1, r3
    1a44:	4819      	ldr	r0, [pc, #100]	; (1aac <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1a46:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a48:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1a4a:	0899      	lsrs	r1, r3, #2
    1a4c:	402b      	ands	r3, r5
    1a4e:	40ab      	lsls	r3, r5
    1a50:	35fc      	adds	r5, #252	; 0xfc
    1a52:	409d      	lsls	r5, r3
    1a54:	0089      	lsls	r1, r1, #2
    1a56:	1809      	adds	r1, r1, r0
    1a58:	00a4      	lsls	r4, r4, #2
    1a5a:	5908      	ldr	r0, [r1, r4]
    1a5c:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    1a5e:	25c0      	movs	r5, #192	; 0xc0
    1a60:	409d      	lsls	r5, r3
    1a62:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1a64:	4303      	orrs	r3, r0
    1a66:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    1a68:	2380      	movs	r3, #128	; 0x80
    1a6a:	01db      	lsls	r3, r3, #7
    1a6c:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    1a6e:	4b10      	ldr	r3, [pc, #64]	; (1ab0 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    1a70:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    1a72:	785a      	ldrb	r2, [r3, #1]
    1a74:	b252      	sxtb	r2, r2
    1a76:	2a00      	cmp	r2, #0
    1a78:	dbfb      	blt.n	1a72 <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    1a7a:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    1a7c:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    1a7e:	2215      	movs	r2, #21
    1a80:	e7dd      	b.n	1a3e <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    1a82:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    1a84:	2216      	movs	r2, #22
    1a86:	e7da      	b.n	1a3e <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    1a88:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    1a8a:	2217      	movs	r2, #23
    1a8c:	e7d7      	b.n	1a3e <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    1a8e:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    1a90:	2218      	movs	r2, #24
    1a92:	e7d4      	b.n	1a3e <_ZN6SERCOM13initClockNVICEv+0x32>
    1a94:	42000800 	.word	0x42000800
    1a98:	42000c00 	.word	0x42000c00
    1a9c:	42001000 	.word	0x42001000
    1aa0:	42001400 	.word	0x42001400
    1aa4:	42001800 	.word	0x42001800
    1aa8:	42001c00 	.word	0x42001c00
    1aac:	e000e100 	.word	0xe000e100
    1ab0:	40000c00 	.word	0x40000c00

00001ab4 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    1ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ab6:	0004      	movs	r4, r0
    1ab8:	0016      	movs	r6, r2
    1aba:	000f      	movs	r7, r1
    1abc:	001d      	movs	r5, r3
  initClockNVIC();
    1abe:	f7ff ffa5 	bl	1a0c <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    1ac2:	0020      	movs	r0, r4
    1ac4:	f7ff ff4c 	bl	1960 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1ac8:	221c      	movs	r2, #28
    1aca:	00bb      	lsls	r3, r7, #2
    1acc:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    1ace:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1ad0:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    1ad2:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1ad4:	4313      	orrs	r3, r2
    1ad6:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    1ad8:	2384      	movs	r3, #132	; 0x84
    1ada:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    1adc:	2f01      	cmp	r7, #1
    1ade:	d118      	bne.n	1b12 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    1ae0:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    1ae2:	2e01      	cmp	r6, #1
    1ae4:	d000      	beq.n	1ae8 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    1ae6:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    1ae8:	4b0a      	ldr	r3, [pc, #40]	; (1b14 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    1aea:	4369      	muls	r1, r5
    1aec:	6818      	ldr	r0, [r3, #0]
    1aee:	00c0      	lsls	r0, r0, #3
    1af0:	f000 fb54 	bl	219c <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    1af4:	2207      	movs	r2, #7
    1af6:	89a3      	ldrh	r3, [r4, #12]
    1af8:	4002      	ands	r2, r0
    1afa:	04db      	lsls	r3, r3, #19
    1afc:	0352      	lsls	r2, r2, #13
    1afe:	0cdb      	lsrs	r3, r3, #19
    1b00:	4313      	orrs	r3, r2
    1b02:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    1b04:	0403      	lsls	r3, r0, #16
    1b06:	89a0      	ldrh	r0, [r4, #12]
    1b08:	0cdb      	lsrs	r3, r3, #19
    1b0a:	0b40      	lsrs	r0, r0, #13
    1b0c:	0340      	lsls	r0, r0, #13
    1b0e:	4318      	orrs	r0, r3
    1b10:	81a0      	strh	r0, [r4, #12]
}
    1b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b14:	2000002c 	.word	0x2000002c

00001b18 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    1b18:	2001      	movs	r0, #1
    1b1a:	4770      	bx	lr

00001b1c <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    1b1c:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    1b1e:	6803      	ldr	r3, [r0, #0]
    1b20:	4a01      	ldr	r2, [pc, #4]	; (1b28 <_ZN4Uart5beginEm+0xc>)
    1b22:	6a1b      	ldr	r3, [r3, #32]
    1b24:	4798      	blx	r3
}
    1b26:	bd10      	pop	{r4, pc}
    1b28:	00000413 	.word	0x00000413

00001b2c <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
    1b2c:	0003      	movs	r3, r0
    1b2e:	33fc      	adds	r3, #252	; 0xfc
    1b30:	69d9      	ldr	r1, [r3, #28]
    1b32:	699a      	ldr	r2, [r3, #24]
    1b34:	4291      	cmp	r1, r2
    1b36:	d003      	beq.n	1b40 <_ZN4Uart4peekEv+0x14>
    return -1;

  return _aucBuffer[_iTail];
    1b38:	69db      	ldr	r3, [r3, #28]
    1b3a:	18c0      	adds	r0, r0, r3
    1b3c:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    1b3e:	4770      	bx	lr
    return -1;
    1b40:	2001      	movs	r0, #1
    1b42:	4240      	negs	r0, r0
  return rxBuffer.peek();
    1b44:	e7fb      	b.n	1b3e <_ZN4Uart4peekEv+0x12>

00001b46 <_ZN4Uart3endEv>:
{
    1b46:	b510      	push	{r4, lr}
    1b48:	0004      	movs	r4, r0
  sercom->resetUART();
    1b4a:	6900      	ldr	r0, [r0, #16]
    1b4c:	f7ff ff08 	bl	1960 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    1b50:	0022      	movs	r2, r4
    1b52:	2300      	movs	r3, #0
    1b54:	32fc      	adds	r2, #252	; 0xfc
    1b56:	6193      	str	r3, [r2, #24]
  _iTail = 0;
    1b58:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
    1b5a:	2286      	movs	r2, #134	; 0x86
    1b5c:	0092      	lsls	r2, r2, #2
    1b5e:	18a4      	adds	r4, r4, r2
    1b60:	6063      	str	r3, [r4, #4]
  _iTail = 0;
    1b62:	60a3      	str	r3, [r4, #8]
}
    1b64:	bd10      	pop	{r4, pc}

00001b66 <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    1b66:	20f0      	movs	r0, #240	; 0xf0
    1b68:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    1b6a:	3930      	subs	r1, #48	; 0x30
    1b6c:	4248      	negs	r0, r1
    1b6e:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    1b70:	4770      	bx	lr

00001b72 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    1b72:	23f0      	movs	r3, #240	; 0xf0
    1b74:	011b      	lsls	r3, r3, #4
    1b76:	4019      	ands	r1, r3
    1b78:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    1b7a:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    1b7c:	009b      	lsls	r3, r3, #2
    1b7e:	4299      	cmp	r1, r3
    1b80:	d00a      	beq.n	1b98 <_ZN4Uart15extractCharSizeEt+0x26>
    1b82:	3301      	adds	r3, #1
    1b84:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    1b86:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    1b88:	4299      	cmp	r1, r3
    1b8a:	d005      	beq.n	1b98 <_ZN4Uart15extractCharSizeEt+0x26>
    1b8c:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    1b8e:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    1b90:	005b      	lsls	r3, r3, #1
    1b92:	4299      	cmp	r1, r3
    1b94:	d000      	beq.n	1b98 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    1b96:	2000      	movs	r0, #0

  }
}
    1b98:	4770      	bx	lr

00001b9a <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    1b9a:	200f      	movs	r0, #15
    1b9c:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    1b9e:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    1ba0:	2901      	cmp	r1, #1
    1ba2:	d003      	beq.n	1bac <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    1ba4:	3902      	subs	r1, #2
    1ba6:	1e48      	subs	r0, r1, #1
    1ba8:	4181      	sbcs	r1, r0
    1baa:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    1bac:	4770      	bx	lr
	...

00001bb0 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1bb0:	2389      	movs	r3, #137	; 0x89
{
    1bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1bb4:	2618      	movs	r6, #24
{
    1bb6:	b085      	sub	sp, #20
    1bb8:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1bba:	009b      	lsls	r3, r3, #2
{
    1bbc:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1bbe:	5cc0      	ldrb	r0, [r0, r3]
    1bc0:	0033      	movs	r3, r6
    1bc2:	2108      	movs	r1, #8
    1bc4:	4343      	muls	r3, r0
    1bc6:	4d32      	ldr	r5, [pc, #200]	; (1c90 <_ZN4Uart5beginEmt+0xe0>)
{
    1bc8:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1bca:	18eb      	adds	r3, r5, r3
    1bcc:	5659      	ldrsb	r1, [r3, r1]
    1bce:	f7ff fdd7 	bl	1780 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    1bd2:	4b30      	ldr	r3, [pc, #192]	; (1c94 <_ZN4Uart5beginEmt+0xe4>)
    1bd4:	2108      	movs	r1, #8
    1bd6:	5ce0      	ldrb	r0, [r4, r3]
    1bd8:	0033      	movs	r3, r6
    1bda:	4343      	muls	r3, r0
    1bdc:	18eb      	adds	r3, r5, r3
    1bde:	5659      	ldrsb	r1, [r3, r1]
    1be0:	f7ff fdce 	bl	1780 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    1be4:	4b2c      	ldr	r3, [pc, #176]	; (1c98 <_ZN4Uart5beginEmt+0xe8>)
    1be6:	5ce2      	ldrb	r2, [r4, r3]
    1be8:	9303      	str	r3, [sp, #12]
    1bea:	2a02      	cmp	r2, #2
    1bec:	d109      	bne.n	1c02 <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
    1bee:	3311      	adds	r3, #17
    1bf0:	5ce0      	ldrb	r0, [r4, r3]
    1bf2:	28ff      	cmp	r0, #255	; 0xff
    1bf4:	d005      	beq.n	1c02 <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    1bf6:	2108      	movs	r1, #8
    1bf8:	4346      	muls	r6, r0
    1bfa:	19ae      	adds	r6, r5, r6
    1bfc:	5671      	ldrsb	r1, [r6, r1]
    1bfe:	f7ff fdbf 	bl	1780 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    1c02:	268a      	movs	r6, #138	; 0x8a
    1c04:	00b6      	lsls	r6, r6, #2
    1c06:	5da0      	ldrb	r0, [r4, r6]
    1c08:	28ff      	cmp	r0, #255	; 0xff
    1c0a:	d019      	beq.n	1c40 <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
    1c0c:	2101      	movs	r1, #1
    1c0e:	f7ff fd3f 	bl	1690 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    1c12:	2218      	movs	r2, #24
    1c14:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    1c16:	4921      	ldr	r1, [pc, #132]	; (1c9c <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    1c18:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    1c1a:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    1c1c:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    1c1e:	01db      	lsls	r3, r3, #7
    1c20:	1858      	adds	r0, r3, r1
    1c22:	218b      	movs	r1, #139	; 0x8b
    1c24:	0089      	lsls	r1, r1, #2
    1c26:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    1c28:	491d      	ldr	r1, [pc, #116]	; (1ca0 <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    1c2a:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    1c2c:	185b      	adds	r3, r3, r1
    1c2e:	218c      	movs	r1, #140	; 0x8c
    1c30:	0089      	lsls	r1, r1, #2
    1c32:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    1c34:	6869      	ldr	r1, [r5, #4]
    1c36:	408a      	lsls	r2, r1
    1c38:	218d      	movs	r1, #141	; 0x8d
    1c3a:	0089      	lsls	r1, r1, #2
    1c3c:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
    1c3e:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    1c40:	2201      	movs	r2, #1
    1c42:	9b02      	ldr	r3, [sp, #8]
    1c44:	0011      	movs	r1, r2
    1c46:	6920      	ldr	r0, [r4, #16]
    1c48:	f7ff ff34 	bl	1ab4 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    1c4c:	0039      	movs	r1, r7
    1c4e:	0020      	movs	r0, r4
    1c50:	f7ff ff8f 	bl	1b72 <_ZN4Uart15extractCharSizeEt>
    1c54:	0039      	movs	r1, r7
    1c56:	0005      	movs	r5, r0
    1c58:	0020      	movs	r0, r4
    1c5a:	f7ff ff9e 	bl	1b9a <_ZN4Uart13extractParityEt>
    1c5e:	0039      	movs	r1, r7
    1c60:	0006      	movs	r6, r0
    1c62:	0020      	movs	r0, r4
    1c64:	f7ff ff7f 	bl	1b66 <_ZN4Uart16extractNbStopBitEt>
    1c68:	0033      	movs	r3, r6
    1c6a:	9000      	str	r0, [sp, #0]
    1c6c:	0029      	movs	r1, r5
    1c6e:	6920      	ldr	r0, [r4, #16]
    1c70:	2201      	movs	r2, #1
    1c72:	f7ff fe49 	bl	1908 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    1c76:	4b0b      	ldr	r3, [pc, #44]	; (1ca4 <_ZN4Uart5beginEmt+0xf4>)
    1c78:	6920      	ldr	r0, [r4, #16]
    1c7a:	5ce2      	ldrb	r2, [r4, r3]
    1c7c:	9b03      	ldr	r3, [sp, #12]
    1c7e:	5ce1      	ldrb	r1, [r4, r3]
    1c80:	f7ff fe5c 	bl	193c <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    1c84:	6920      	ldr	r0, [r4, #16]
    1c86:	f7ff fe77 	bl	1978 <_ZN6SERCOM10enableUARTEv>
}
    1c8a:	b005      	add	sp, #20
    1c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c8e:	46c0      	nop			; (mov r8, r8)
    1c90:	0000255c 	.word	0x0000255c
    1c94:	00000225 	.word	0x00000225
    1c98:	00000227 	.word	0x00000227
    1c9c:	41004418 	.word	0x41004418
    1ca0:	41004414 	.word	0x41004414
    1ca4:	00000226 	.word	0x00000226

00001ca8 <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
    1ca8:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
    1caa:	b510      	push	{r4, lr}
    1cac:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
    1cae:	0052      	lsls	r2, r2, #1
    1cb0:	2100      	movs	r1, #0
    1cb2:	f000 fb40 	bl	2336 <memset>
  _iHead = 0;
    1cb6:	0023      	movs	r3, r4
    1cb8:	2200      	movs	r2, #0
    1cba:	33fc      	adds	r3, #252	; 0xfc
    1cbc:	605a      	str	r2, [r3, #4]
}
    1cbe:	0020      	movs	r0, r4
  _iTail = 0;
    1cc0:	609a      	str	r2, [r3, #8]
}
    1cc2:	bd10      	pop	{r4, pc}

00001cc4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    1cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1cc6:	001d      	movs	r5, r3
    1cc8:	ab08      	add	r3, sp, #32
    1cca:	781b      	ldrb	r3, [r3, #0]
    1ccc:	0004      	movs	r4, r0
    1cce:	9300      	str	r3, [sp, #0]
    1cd0:	ab09      	add	r3, sp, #36	; 0x24
    1cd2:	781b      	ldrb	r3, [r3, #0]
    1cd4:	0016      	movs	r6, r2
    1cd6:	9301      	str	r3, [sp, #4]
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1cd8:	2300      	movs	r3, #0
    1cda:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1cdc:	23fa      	movs	r3, #250	; 0xfa
    1cde:	009b      	lsls	r3, r3, #2
    1ce0:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    1ce2:	4b11      	ldr	r3, [pc, #68]	; (1d28 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    1ce4:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    1ce6:	3308      	adds	r3, #8
    1ce8:	6003      	str	r3, [r0, #0]
    1cea:	3014      	adds	r0, #20
    1cec:	f7ff ffdc 	bl	1ca8 <_ZN11RingBufferNILi256EEC1Ev>
    1cf0:	0020      	movs	r0, r4
    1cf2:	301d      	adds	r0, #29
    1cf4:	30ff      	adds	r0, #255	; 0xff
    1cf6:	f7ff ffd7 	bl	1ca8 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    1cfa:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    1cfc:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    1cfe:	009b      	lsls	r3, r3, #2
  sercom = _s;
    1d00:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    1d02:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    1d04:	4b09      	ldr	r3, [pc, #36]	; (1d2c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
    1d06:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    1d08:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    1d0a:	4b09      	ldr	r3, [pc, #36]	; (1d30 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
    1d0c:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    1d0e:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    1d10:	466a      	mov	r2, sp
    1d12:	4b08      	ldr	r3, [pc, #32]	; (1d34 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
    1d14:	7912      	ldrb	r2, [r2, #4]
    1d16:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    1d18:	228a      	movs	r2, #138	; 0x8a
    1d1a:	3b29      	subs	r3, #41	; 0x29
    1d1c:	3bff      	subs	r3, #255	; 0xff
    1d1e:	0092      	lsls	r2, r2, #2
    1d20:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
    1d22:	3210      	adds	r2, #16
    1d24:	54a3      	strb	r3, [r4, r2]
}
    1d26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1d28:	000029dc 	.word	0x000029dc
    1d2c:	00000225 	.word	0x00000225
    1d30:	00000226 	.word	0x00000226
    1d34:	00000227 	.word	0x00000227

00001d38 <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
    1d38:	0003      	movs	r3, r0
    1d3a:	33fc      	adds	r3, #252	; 0xfc
    1d3c:	6858      	ldr	r0, [r3, #4]
    1d3e:	689b      	ldr	r3, [r3, #8]
    1d40:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    1d42:	d501      	bpl.n	1d48 <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
    1d44:	3001      	adds	r0, #1
    1d46:	30ff      	adds	r0, #255	; 0xff
}
    1d48:	4770      	bx	lr

00001d4a <_ZN4Uart5flushEv>:
{
    1d4a:	b510      	push	{r4, lr}
    1d4c:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    1d4e:	0020      	movs	r0, r4
    1d50:	301d      	adds	r0, #29
    1d52:	30ff      	adds	r0, #255	; 0xff
    1d54:	f7ff fff0 	bl	1d38 <_ZN11RingBufferNILi256EE9availableEv>
    1d58:	2800      	cmp	r0, #0
    1d5a:	d1f8      	bne.n	1d4e <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    1d5c:	6920      	ldr	r0, [r4, #16]
    1d5e:	f7ff fe14 	bl	198a <_ZN6SERCOM9flushUARTEv>
}
    1d62:	bd10      	pop	{r4, pc}

00001d64 <_ZN4Uart9availableEv>:
{
    1d64:	b510      	push	{r4, lr}
  return rxBuffer.available();
    1d66:	3014      	adds	r0, #20
    1d68:	f7ff ffe6 	bl	1d38 <_ZN11RingBufferNILi256EE9availableEv>
}
    1d6c:	bd10      	pop	{r4, pc}

00001d6e <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
    1d6e:	0003      	movs	r3, r0
    1d70:	33fc      	adds	r3, #252	; 0xfc
    1d72:	6859      	ldr	r1, [r3, #4]
    1d74:	689a      	ldr	r2, [r3, #8]
    1d76:	4291      	cmp	r1, r2
    1d78:	db04      	blt.n	1d84 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
    1d7a:	685a      	ldr	r2, [r3, #4]
    1d7c:	6898      	ldr	r0, [r3, #8]
    1d7e:	1a80      	subs	r0, r0, r2
    1d80:	30ff      	adds	r0, #255	; 0xff
}
    1d82:	4770      	bx	lr
    return _iTail - _iHead - 1;
    1d84:	6898      	ldr	r0, [r3, #8]
    1d86:	685b      	ldr	r3, [r3, #4]
    1d88:	1ac0      	subs	r0, r0, r3
    1d8a:	3801      	subs	r0, #1
    1d8c:	e7f9      	b.n	1d82 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

00001d8e <_ZN4Uart17availableForWriteEv>:
{
    1d8e:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    1d90:	301d      	adds	r0, #29
    1d92:	30ff      	adds	r0, #255	; 0xff
    1d94:	f7ff ffeb 	bl	1d6e <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
    1d98:	bd10      	pop	{r4, pc}

00001d9a <_ZN4Uart10IrqHandlerEv>:
{
    1d9a:	b510      	push	{r4, lr}
    1d9c:	0004      	movs	r4, r0
  if (sercom->isFrameErrorUART()) {
    1d9e:	6900      	ldr	r0, [r0, #16]
    1da0:	f7ff fe0f 	bl	19c2 <_ZN6SERCOM16isFrameErrorUARTEv>
    1da4:	2800      	cmp	r0, #0
    1da6:	d005      	beq.n	1db4 <_ZN4Uart10IrqHandlerEv+0x1a>
    sercom->readDataUART();
    1da8:	6920      	ldr	r0, [r4, #16]
    1daa:	f7ff fe1a 	bl	19e2 <_ZN6SERCOM12readDataUARTEv>
    sercom->clearFrameErrorUART();
    1dae:	6920      	ldr	r0, [r4, #16]
    1db0:	f7ff fe0c 	bl	19cc <_ZN6SERCOM19clearFrameErrorUARTEv>
  if (sercom->availableDataUART()) {
    1db4:	6920      	ldr	r0, [r4, #16]
    1db6:	f7ff fdf4 	bl	19a2 <_ZN6SERCOM17availableDataUARTEv>
    1dba:	2800      	cmp	r0, #0
    1dbc:	d020      	beq.n	1e00 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    1dbe:	6920      	ldr	r0, [r4, #16]
    1dc0:	f7ff fe0f 	bl	19e2 <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
    1dc4:	0022      	movs	r2, r4
    1dc6:	32fc      	adds	r2, #252	; 0xfc
    1dc8:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
    1dca:	69d1      	ldr	r1, [r2, #28]
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
    1dcc:	3301      	adds	r3, #1
    1dce:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    1dd0:	428b      	cmp	r3, r1
    1dd2:	d003      	beq.n	1ddc <_ZN4Uart10IrqHandlerEv+0x42>
    _aucBuffer[_iHead] = c ;
    1dd4:	6991      	ldr	r1, [r2, #24]
    1dd6:	1861      	adds	r1, r4, r1
    1dd8:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
    1dda:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
    1ddc:	238a      	movs	r3, #138	; 0x8a
    1dde:	009b      	lsls	r3, r3, #2
    1de0:	5ce3      	ldrb	r3, [r4, r3]
    1de2:	2bff      	cmp	r3, #255	; 0xff
    1de4:	d00c      	beq.n	1e00 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    1de6:	0020      	movs	r0, r4
    1de8:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    1dea:	f7ff ffc0 	bl	1d6e <_ZN11RingBufferNILi256EE17availableForStoreEv>
    1dee:	2809      	cmp	r0, #9
    1df0:	dc06      	bgt.n	1e00 <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
    1df2:	238b      	movs	r3, #139	; 0x8b
    1df4:	228d      	movs	r2, #141	; 0x8d
    1df6:	009b      	lsls	r3, r3, #2
    1df8:	0092      	lsls	r2, r2, #2
    1dfa:	58e3      	ldr	r3, [r4, r3]
    1dfc:	58a2      	ldr	r2, [r4, r2]
    1dfe:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    1e00:	6920      	ldr	r0, [r4, #16]
    1e02:	f7ff fde9 	bl	19d8 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    1e06:	2800      	cmp	r0, #0
    1e08:	d01a      	beq.n	1e40 <_ZN4Uart10IrqHandlerEv+0xa6>
    if (txBuffer.available()) {
    1e0a:	0020      	movs	r0, r4
    1e0c:	301d      	adds	r0, #29
    1e0e:	30ff      	adds	r0, #255	; 0xff
    1e10:	f7ff ff92 	bl	1d38 <_ZN11RingBufferNILi256EE9availableEv>
    1e14:	2800      	cmp	r0, #0
    1e16:	d022      	beq.n	1e5e <_ZN4Uart10IrqHandlerEv+0xc4>
  if(_iTail == _iHead)
    1e18:	2386      	movs	r3, #134	; 0x86
    1e1a:	009b      	lsls	r3, r3, #2
    1e1c:	18e3      	adds	r3, r4, r3
    1e1e:	6899      	ldr	r1, [r3, #8]
    1e20:	685a      	ldr	r2, [r3, #4]
    1e22:	4291      	cmp	r1, r2
    1e24:	d018      	beq.n	1e58 <_ZN4Uart10IrqHandlerEv+0xbe>
  uint8_t value = _aucBuffer[_iTail];
    1e26:	218e      	movs	r1, #142	; 0x8e
    1e28:	689a      	ldr	r2, [r3, #8]
    1e2a:	0049      	lsls	r1, r1, #1
    1e2c:	18a2      	adds	r2, r4, r2
    1e2e:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
    1e30:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    1e32:	3201      	adds	r2, #1
    1e34:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    1e36:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
    1e38:	b2c9      	uxtb	r1, r1
    1e3a:	6920      	ldr	r0, [r4, #16]
    1e3c:	f7ff fdd5 	bl	19ea <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    1e40:	6920      	ldr	r0, [r4, #16]
    1e42:	f7ff fdb3 	bl	19ac <_ZN6SERCOM11isUARTErrorEv>
    1e46:	2800      	cmp	r0, #0
    1e48:	d005      	beq.n	1e56 <_ZN4Uart10IrqHandlerEv+0xbc>
    sercom->acknowledgeUARTError();
    1e4a:	6920      	ldr	r0, [r4, #16]
    1e4c:	f7ff fdb2 	bl	19b4 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    1e50:	6920      	ldr	r0, [r4, #16]
    1e52:	f7ff fda2 	bl	199a <_ZN6SERCOM15clearStatusUARTEv>
}
    1e56:	bd10      	pop	{r4, pc}
    return -1;
    1e58:	2101      	movs	r1, #1
    1e5a:	4249      	negs	r1, r1
    1e5c:	e7ec      	b.n	1e38 <_ZN4Uart10IrqHandlerEv+0x9e>
      sercom->disableDataRegisterEmptyInterruptUART();
    1e5e:	6920      	ldr	r0, [r4, #16]
    1e60:	f7ff fdcf 	bl	1a02 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    1e64:	e7ec      	b.n	1e40 <_ZN4Uart10IrqHandlerEv+0xa6>
	...

00001e68 <_ZN4Uart5writeEh>:
{
    1e68:	b570      	push	{r4, r5, r6, lr}
    1e6a:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    1e6c:	6900      	ldr	r0, [r0, #16]
{
    1e6e:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    1e70:	f7ff fdb2 	bl	19d8 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    1e74:	2800      	cmp	r0, #0
    1e76:	d124      	bne.n	1ec2 <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
    1e78:	26ff      	movs	r6, #255	; 0xff
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    1e7a:	2386      	movs	r3, #134	; 0x86
    1e7c:	009b      	lsls	r3, r3, #2
    1e7e:	18e3      	adds	r3, r4, r3
    1e80:	685a      	ldr	r2, [r3, #4]
    1e82:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
    1e84:	3201      	adds	r2, #1
    1e86:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
    1e88:	428a      	cmp	r2, r1
    1e8a:	d12f      	bne.n	1eec <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1e8c:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    1e90:	07db      	lsls	r3, r3, #31
    1e92:	d40d      	bmi.n	1eb0 <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    1e94:	4b1e      	ldr	r3, [pc, #120]	; (1f10 <_ZN4Uart5writeEh+0xa8>)
    1e96:	685b      	ldr	r3, [r3, #4]
    1e98:	05db      	lsls	r3, r3, #23
    1e9a:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    1e9c:	d0ed      	beq.n	1e7a <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    1e9e:	3b10      	subs	r3, #16
    1ea0:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	db19      	blt.n	1eda <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    1ea6:	089b      	lsrs	r3, r3, #2
    1ea8:	33c0      	adds	r3, #192	; 0xc0
    1eaa:	4a1a      	ldr	r2, [pc, #104]	; (1f14 <_ZN4Uart5writeEh+0xac>)
    1eac:	009b      	lsls	r3, r3, #2
    1eae:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    1eb0:	6920      	ldr	r0, [r4, #16]
    1eb2:	f7ff fd91 	bl	19d8 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    1eb6:	2800      	cmp	r0, #0
    1eb8:	d0df      	beq.n	1e7a <_ZN4Uart5writeEh+0x12>
        IrqHandler();
    1eba:	0020      	movs	r0, r4
    1ebc:	f7ff ff6d 	bl	1d9a <_ZN4Uart10IrqHandlerEv>
    1ec0:	e7db      	b.n	1e7a <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    1ec2:	0020      	movs	r0, r4
    1ec4:	301d      	adds	r0, #29
    1ec6:	30ff      	adds	r0, #255	; 0xff
    1ec8:	f7ff ff36 	bl	1d38 <_ZN11RingBufferNILi256EE9availableEv>
    1ecc:	2800      	cmp	r0, #0
    1ece:	d1d3      	bne.n	1e78 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    1ed0:	0029      	movs	r1, r5
    1ed2:	6920      	ldr	r0, [r4, #16]
    1ed4:	f7ff fd89 	bl	19ea <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    1ed8:	e017      	b.n	1f0a <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    1eda:	220f      	movs	r2, #15
    1edc:	4013      	ands	r3, r2
    1ede:	3b08      	subs	r3, #8
    1ee0:	089b      	lsrs	r3, r3, #2
    1ee2:	4a0d      	ldr	r2, [pc, #52]	; (1f18 <_ZN4Uart5writeEh+0xb0>)
    1ee4:	009b      	lsls	r3, r3, #2
    1ee6:	189b      	adds	r3, r3, r2
    1ee8:	681b      	ldr	r3, [r3, #0]
    1eea:	e7e1      	b.n	1eb0 <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
    1eec:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
    1eee:	3201      	adds	r2, #1
    1ef0:	4016      	ands	r6, r2
  if ( i != _iTail )
    1ef2:	689a      	ldr	r2, [r3, #8]
    1ef4:	4296      	cmp	r6, r2
    1ef6:	d005      	beq.n	1f04 <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    1ef8:	218e      	movs	r1, #142	; 0x8e
    1efa:	685a      	ldr	r2, [r3, #4]
    1efc:	0049      	lsls	r1, r1, #1
    1efe:	18a2      	adds	r2, r4, r2
    1f00:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
    1f02:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
    1f04:	6920      	ldr	r0, [r4, #16]
    1f06:	f7ff fd78 	bl	19fa <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    1f0a:	2001      	movs	r0, #1
    1f0c:	bd70      	pop	{r4, r5, r6, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	e000ed00 	.word	0xe000ed00
    1f14:	e000e100 	.word	0xe000e100
    1f18:	e000ed1c 	.word	0xe000ed1c

00001f1c <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    1f1c:	0003      	movs	r3, r0
    1f1e:	33fc      	adds	r3, #252	; 0xfc
    1f20:	69d9      	ldr	r1, [r3, #28]
    1f22:	699a      	ldr	r2, [r3, #24]
{
    1f24:	b570      	push	{r4, r5, r6, lr}
    1f26:	0004      	movs	r4, r0
    1f28:	4291      	cmp	r1, r2
    1f2a:	d01a      	beq.n	1f62 <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
    1f2c:	69da      	ldr	r2, [r3, #28]
    1f2e:	1882      	adds	r2, r0, r2
    1f30:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
    1f32:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
    1f34:	3201      	adds	r2, #1
    1f36:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    1f38:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
    1f3a:	238a      	movs	r3, #138	; 0x8a
    1f3c:	009b      	lsls	r3, r3, #2
    1f3e:	5ce3      	ldrb	r3, [r4, r3]
    1f40:	2bff      	cmp	r3, #255	; 0xff
    1f42:	d00c      	beq.n	1f5e <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
    1f44:	0020      	movs	r0, r4
    1f46:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    1f48:	f7ff ff11 	bl	1d6e <_ZN11RingBufferNILi256EE17availableForStoreEv>
    1f4c:	280a      	cmp	r0, #10
    1f4e:	dd06      	ble.n	1f5e <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
    1f50:	238c      	movs	r3, #140	; 0x8c
    1f52:	228d      	movs	r2, #141	; 0x8d
    1f54:	009b      	lsls	r3, r3, #2
    1f56:	0092      	lsls	r2, r2, #2
    1f58:	58e3      	ldr	r3, [r4, r3]
    1f5a:	58a2      	ldr	r2, [r4, r2]
    1f5c:	601a      	str	r2, [r3, #0]
}
    1f5e:	0028      	movs	r0, r5
    1f60:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    1f62:	2501      	movs	r5, #1
    1f64:	426d      	negs	r5, r5
    1f66:	e7e8      	b.n	1f3a <_ZN4Uart4readEv+0x1e>

00001f68 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    1f68:	203f      	movs	r0, #63	; 0x3f
    1f6a:	4770      	bx	lr

00001f6c <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    1f6c:	b513      	push	{r0, r1, r4, lr}
    1f6e:	466b      	mov	r3, sp
	return write(&c, 1);
    1f70:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    1f72:	71d9      	strb	r1, [r3, #7]
    1f74:	3307      	adds	r3, #7
	return write(&c, 1);
    1f76:	6854      	ldr	r4, [r2, #4]
    1f78:	0019      	movs	r1, r3
    1f7a:	2201      	movs	r2, #1
    1f7c:	47a0      	blx	r4
}
    1f7e:	bd16      	pop	{r1, r2, r4, pc}

00001f80 <_ZN7Serial_9availableEv>:
{
    1f80:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    1f82:	2102      	movs	r1, #2
    1f84:	6900      	ldr	r0, [r0, #16]
    1f86:	f7fe fec7 	bl	d18 <_ZN14USBDeviceClass9availableEm>
}
    1f8a:	bd10      	pop	{r4, pc}

00001f8c <_ZN7Serial_5flushEv>:
{
    1f8c:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    1f8e:	2103      	movs	r1, #3
    1f90:	6900      	ldr	r0, [r0, #16]
    1f92:	f7fe fed7 	bl	d44 <_ZN14USBDeviceClass5flushEm>
}
    1f96:	bd10      	pop	{r4, pc}

00001f98 <_ZN7Serial_5writeEPKhj>:
{
    1f98:	b510      	push	{r4, lr}
    1f9a:	0013      	movs	r3, r2
    1f9c:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    1f9e:	000a      	movs	r2, r1
    1fa0:	6900      	ldr	r0, [r0, #16]
    1fa2:	2103      	movs	r1, #3
    1fa4:	f7fe ffc8 	bl	f38 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    1fa8:	2800      	cmp	r0, #0
    1faa:	d101      	bne.n	1fb0 <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    1fac:	2301      	movs	r3, #1
    1fae:	6063      	str	r3, [r4, #4]
}
    1fb0:	bd10      	pop	{r4, pc}
	...

00001fb4 <_ZN7Serial_4peekEv>:
{
    1fb4:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    1fb6:	4c05      	ldr	r4, [pc, #20]	; (1fcc <_ZN7Serial_4peekEv+0x18>)
    1fb8:	6823      	ldr	r3, [r4, #0]
    1fba:	1c5a      	adds	r2, r3, #1
    1fbc:	d104      	bne.n	1fc8 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    1fbe:	6803      	ldr	r3, [r0, #0]
    1fc0:	695b      	ldr	r3, [r3, #20]
    1fc2:	4798      	blx	r3
    1fc4:	0003      	movs	r3, r0
    1fc6:	6020      	str	r0, [r4, #0]
}
    1fc8:	0018      	movs	r0, r3
    1fca:	bd10      	pop	{r4, pc}
    1fcc:	20000080 	.word	0x20000080

00001fd0 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    1fd0:	4b07      	ldr	r3, [pc, #28]	; (1ff0 <_ZN7Serial_4readEv+0x20>)
{
    1fd2:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    1fd4:	6818      	ldr	r0, [r3, #0]
{
    1fd6:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    1fd8:	1c41      	adds	r1, r0, #1
    1fda:	d003      	beq.n	1fe4 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    1fdc:	2201      	movs	r2, #1
    1fde:	4252      	negs	r2, r2
    1fe0:	601a      	str	r2, [r3, #0]
}
    1fe2:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    1fe4:	2102      	movs	r1, #2
    1fe6:	6910      	ldr	r0, [r2, #16]
    1fe8:	f7fe ff98 	bl	f1c <_ZN14USBDeviceClass4recvEm>
    1fec:	e7f9      	b.n	1fe2 <_ZN7Serial_4readEv+0x12>
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	20000080 	.word	0x20000080

00001ff4 <_Z16CDC_GetInterfacePh>:
{
    1ff4:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    1ff6:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    1ff8:	2242      	movs	r2, #66	; 0x42
	interfaceNum[0] += 2;	// uses 2
    1ffa:	3302      	adds	r3, #2
    1ffc:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    1ffe:	4902      	ldr	r1, [pc, #8]	; (2008 <_Z16CDC_GetInterfacePh+0x14>)
    2000:	4802      	ldr	r0, [pc, #8]	; (200c <_Z16CDC_GetInterfacePh+0x18>)
    2002:	f7ff f845 	bl	1090 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    2006:	bd10      	pop	{r4, pc}
    2008:	2000003c 	.word	0x2000003c
    200c:	20000124 	.word	0x20000124

00002010 <_Z9CDC_SetupR8USBSetup>:
{
    2010:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    2012:	7801      	ldrb	r1, [r0, #0]
{
    2014:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    2016:	7842      	ldrb	r2, [r0, #1]
	return false;
    2018:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    201a:	29a1      	cmp	r1, #161	; 0xa1
    201c:	d108      	bne.n	2030 <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    201e:	2a21      	cmp	r2, #33	; 0x21
    2020:	d105      	bne.n	202e <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    2022:	3a1a      	subs	r2, #26
    2024:	4916      	ldr	r1, [pc, #88]	; (2080 <_Z9CDC_SetupR8USBSetup+0x70>)
    2026:	4817      	ldr	r0, [pc, #92]	; (2084 <_Z9CDC_SetupR8USBSetup+0x74>)
    2028:	f7ff f832 	bl	1090 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    202c:	2001      	movs	r0, #1
}
    202e:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    2030:	2921      	cmp	r1, #33	; 0x21
    2032:	d1fc      	bne.n	202e <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    2034:	2a20      	cmp	r2, #32
    2036:	d111      	bne.n	205c <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    2038:	3a19      	subs	r2, #25
    203a:	4911      	ldr	r1, [pc, #68]	; (2080 <_Z9CDC_SetupR8USBSetup+0x70>)
    203c:	4811      	ldr	r0, [pc, #68]	; (2084 <_Z9CDC_SetupR8USBSetup+0x74>)
    203e:	f7fe fec5 	bl	dcc <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    2042:	2296      	movs	r2, #150	; 0x96
    2044:	4b0e      	ldr	r3, [pc, #56]	; (2080 <_Z9CDC_SetupR8USBSetup+0x70>)
    2046:	00d2      	lsls	r2, r2, #3
    2048:	6819      	ldr	r1, [r3, #0]
    204a:	4291      	cmp	r1, r2
    204c:	d103      	bne.n	2056 <_Z9CDC_SetupR8USBSetup+0x46>
    204e:	2401      	movs	r4, #1
    2050:	79d8      	ldrb	r0, [r3, #7]
    2052:	4004      	ands	r4, r0
    2054:	d00e      	beq.n	2074 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    2056:	f7fe f9b7 	bl	3c8 <cancelReset>
    205a:	e00e      	b.n	207a <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    205c:	2a22      	cmp	r2, #34	; 0x22
    205e:	d103      	bne.n	2068 <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    2060:	789a      	ldrb	r2, [r3, #2]
    2062:	4b07      	ldr	r3, [pc, #28]	; (2080 <_Z9CDC_SetupR8USBSetup+0x70>)
    2064:	71da      	strb	r2, [r3, #7]
    2066:	e7ec      	b.n	2042 <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    2068:	2a23      	cmp	r2, #35	; 0x23
    206a:	d1e0      	bne.n	202e <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    206c:	885a      	ldrh	r2, [r3, #2]
    206e:	4b06      	ldr	r3, [pc, #24]	; (2088 <_Z9CDC_SetupR8USBSetup+0x78>)
    2070:	601a      	str	r2, [r3, #0]
			return false;
    2072:	e7dc      	b.n	202e <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    2074:	20fa      	movs	r0, #250	; 0xfa
    2076:	f7fe f9a1 	bl	3bc <initiateReset>
			return false;
    207a:	2000      	movs	r0, #0
    207c:	e7d7      	b.n	202e <_Z9CDC_SetupR8USBSetup+0x1e>
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	20000034 	.word	0x20000034
    2084:	20000124 	.word	0x20000124
    2088:	20000030 	.word	0x20000030

0000208c <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    208c:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    208e:	2100      	movs	r1, #0
    2090:	4b05      	ldr	r3, [pc, #20]	; (20a8 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    2092:	0092      	lsls	r2, r2, #2
    2094:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    2096:	4a05      	ldr	r2, [pc, #20]	; (20ac <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    2098:	6059      	str	r1, [r3, #4]
    209a:	3208      	adds	r2, #8
    209c:	601a      	str	r2, [r3, #0]
    209e:	4a04      	ldr	r2, [pc, #16]	; (20b0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    20a0:	7619      	strb	r1, [r3, #24]
    20a2:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    20a4:	4770      	bx	lr
    20a6:	46c0      	nop			; (mov r8, r8)
    20a8:	20000b70 	.word	0x20000b70
    20ac:	00002a10 	.word	0x00002a10
    20b0:	20000124 	.word	0x20000124

000020b4 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    20b4:	b570      	push	{r4, r5, r6, lr}
    20b6:	000e      	movs	r6, r1
	int sent = 0;
    20b8:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    20ba:	6844      	ldr	r4, [r0, #4]
    20bc:	2c00      	cmp	r4, #0
    20be:	d00b      	beq.n	20d8 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    20c0:	6823      	ldr	r3, [r4, #0]
    20c2:	0031      	movs	r1, r6
    20c4:	685b      	ldr	r3, [r3, #4]
    20c6:	0020      	movs	r0, r4
    20c8:	4798      	blx	r3
		if (res < 0)
    20ca:	2800      	cmp	r0, #0
    20cc:	db02      	blt.n	20d4 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    20ce:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    20d0:	68e4      	ldr	r4, [r4, #12]
    20d2:	e7f3      	b.n	20bc <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    20d4:	2501      	movs	r5, #1
    20d6:	426d      	negs	r5, r5
	}
	return sent;
}
    20d8:	0028      	movs	r0, r5
    20da:	bd70      	pop	{r4, r5, r6, pc}

000020dc <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    20dc:	b570      	push	{r4, r5, r6, lr}
    20de:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    20e0:	6844      	ldr	r4, [r0, #4]
    20e2:	2c00      	cmp	r4, #0
    20e4:	d008      	beq.n	20f8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    20e6:	6823      	ldr	r3, [r4, #0]
    20e8:	0029      	movs	r1, r5
    20ea:	689b      	ldr	r3, [r3, #8]
    20ec:	0020      	movs	r0, r4
    20ee:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    20f0:	2800      	cmp	r0, #0
    20f2:	d102      	bne.n	20fa <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    20f4:	68e4      	ldr	r4, [r4, #12]
    20f6:	e7f4      	b.n	20e2 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    20f8:	0020      	movs	r0, r4
}
    20fa:	bd70      	pop	{r4, r5, r6, pc}

000020fc <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    20fc:	b570      	push	{r4, r5, r6, lr}
    20fe:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    2100:	6844      	ldr	r4, [r0, #4]
    2102:	2c00      	cmp	r4, #0
    2104:	d007      	beq.n	2116 <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    2106:	6823      	ldr	r3, [r4, #0]
    2108:	0029      	movs	r1, r5
    210a:	0020      	movs	r0, r4
    210c:	68db      	ldr	r3, [r3, #12]
    210e:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    2110:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    2112:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    2114:	e7f5      	b.n	2102 <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    2116:	702c      	strb	r4, [r5, #0]
}
    2118:	bd70      	pop	{r4, r5, r6, pc}

0000211a <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    211a:	b570      	push	{r4, r5, r6, lr}
    211c:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    211e:	6844      	ldr	r4, [r0, #4]
    2120:	2c00      	cmp	r4, #0
    2122:	d008      	beq.n	2136 <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    2124:	6823      	ldr	r3, [r4, #0]
    2126:	0029      	movs	r1, r5
    2128:	681b      	ldr	r3, [r3, #0]
    212a:	0020      	movs	r0, r4
    212c:	4798      	blx	r3
    212e:	2800      	cmp	r0, #0
    2130:	d102      	bne.n	2138 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    2132:	68e4      	ldr	r4, [r4, #12]
    2134:	e7f4      	b.n	2120 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    2136:	0020      	movs	r0, r4
}
    2138:	bd70      	pop	{r4, r5, r6, pc}
	...

0000213c <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    213c:	2101      	movs	r1, #1
    213e:	4a06      	ldr	r2, [pc, #24]	; (2158 <_Z12PluggableUSBv+0x1c>)
{
    2140:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    2142:	6813      	ldr	r3, [r2, #0]
    2144:	4805      	ldr	r0, [pc, #20]	; (215c <_Z12PluggableUSBv+0x20>)
    2146:	400b      	ands	r3, r1
    2148:	d105      	bne.n	2156 <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    214a:	2402      	movs	r4, #2
    214c:	7004      	strb	r4, [r0, #0]
    214e:	1924      	adds	r4, r4, r4
    2150:	7044      	strb	r4, [r0, #1]
    2152:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    2154:	6011      	str	r1, [r2, #0]
}
    2156:	bd10      	pop	{r4, pc}
    2158:	20000b8c 	.word	0x20000b8c
    215c:	20000b90 	.word	0x20000b90

00002160 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2162:	0006      	movs	r6, r0
    2164:	000d      	movs	r5, r1
    2166:	000c      	movs	r4, r1
    2168:	188b      	adds	r3, r1, r2
    216a:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    216c:	9b01      	ldr	r3, [sp, #4]
    216e:	1b67      	subs	r7, r4, r5
    2170:	429c      	cmp	r4, r3
    2172:	d007      	beq.n	2184 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    2174:	6833      	ldr	r3, [r6, #0]
    2176:	7821      	ldrb	r1, [r4, #0]
    2178:	681b      	ldr	r3, [r3, #0]
    217a:	0030      	movs	r0, r6
    217c:	4798      	blx	r3
    217e:	3401      	adds	r4, #1
    2180:	2800      	cmp	r0, #0
    2182:	d1f3      	bne.n	216c <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    2184:	0038      	movs	r0, r7
    2186:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00002188 <__gnu_thumb1_case_uqi>:
    2188:	b402      	push	{r1}
    218a:	4671      	mov	r1, lr
    218c:	0849      	lsrs	r1, r1, #1
    218e:	0049      	lsls	r1, r1, #1
    2190:	5c09      	ldrb	r1, [r1, r0]
    2192:	0049      	lsls	r1, r1, #1
    2194:	448e      	add	lr, r1
    2196:	bc02      	pop	{r1}
    2198:	4770      	bx	lr
    219a:	46c0      	nop			; (mov r8, r8)

0000219c <__udivsi3>:
    219c:	2200      	movs	r2, #0
    219e:	0843      	lsrs	r3, r0, #1
    21a0:	428b      	cmp	r3, r1
    21a2:	d374      	bcc.n	228e <__udivsi3+0xf2>
    21a4:	0903      	lsrs	r3, r0, #4
    21a6:	428b      	cmp	r3, r1
    21a8:	d35f      	bcc.n	226a <__udivsi3+0xce>
    21aa:	0a03      	lsrs	r3, r0, #8
    21ac:	428b      	cmp	r3, r1
    21ae:	d344      	bcc.n	223a <__udivsi3+0x9e>
    21b0:	0b03      	lsrs	r3, r0, #12
    21b2:	428b      	cmp	r3, r1
    21b4:	d328      	bcc.n	2208 <__udivsi3+0x6c>
    21b6:	0c03      	lsrs	r3, r0, #16
    21b8:	428b      	cmp	r3, r1
    21ba:	d30d      	bcc.n	21d8 <__udivsi3+0x3c>
    21bc:	22ff      	movs	r2, #255	; 0xff
    21be:	0209      	lsls	r1, r1, #8
    21c0:	ba12      	rev	r2, r2
    21c2:	0c03      	lsrs	r3, r0, #16
    21c4:	428b      	cmp	r3, r1
    21c6:	d302      	bcc.n	21ce <__udivsi3+0x32>
    21c8:	1212      	asrs	r2, r2, #8
    21ca:	0209      	lsls	r1, r1, #8
    21cc:	d065      	beq.n	229a <__udivsi3+0xfe>
    21ce:	0b03      	lsrs	r3, r0, #12
    21d0:	428b      	cmp	r3, r1
    21d2:	d319      	bcc.n	2208 <__udivsi3+0x6c>
    21d4:	e000      	b.n	21d8 <__udivsi3+0x3c>
    21d6:	0a09      	lsrs	r1, r1, #8
    21d8:	0bc3      	lsrs	r3, r0, #15
    21da:	428b      	cmp	r3, r1
    21dc:	d301      	bcc.n	21e2 <__udivsi3+0x46>
    21de:	03cb      	lsls	r3, r1, #15
    21e0:	1ac0      	subs	r0, r0, r3
    21e2:	4152      	adcs	r2, r2
    21e4:	0b83      	lsrs	r3, r0, #14
    21e6:	428b      	cmp	r3, r1
    21e8:	d301      	bcc.n	21ee <__udivsi3+0x52>
    21ea:	038b      	lsls	r3, r1, #14
    21ec:	1ac0      	subs	r0, r0, r3
    21ee:	4152      	adcs	r2, r2
    21f0:	0b43      	lsrs	r3, r0, #13
    21f2:	428b      	cmp	r3, r1
    21f4:	d301      	bcc.n	21fa <__udivsi3+0x5e>
    21f6:	034b      	lsls	r3, r1, #13
    21f8:	1ac0      	subs	r0, r0, r3
    21fa:	4152      	adcs	r2, r2
    21fc:	0b03      	lsrs	r3, r0, #12
    21fe:	428b      	cmp	r3, r1
    2200:	d301      	bcc.n	2206 <__udivsi3+0x6a>
    2202:	030b      	lsls	r3, r1, #12
    2204:	1ac0      	subs	r0, r0, r3
    2206:	4152      	adcs	r2, r2
    2208:	0ac3      	lsrs	r3, r0, #11
    220a:	428b      	cmp	r3, r1
    220c:	d301      	bcc.n	2212 <__udivsi3+0x76>
    220e:	02cb      	lsls	r3, r1, #11
    2210:	1ac0      	subs	r0, r0, r3
    2212:	4152      	adcs	r2, r2
    2214:	0a83      	lsrs	r3, r0, #10
    2216:	428b      	cmp	r3, r1
    2218:	d301      	bcc.n	221e <__udivsi3+0x82>
    221a:	028b      	lsls	r3, r1, #10
    221c:	1ac0      	subs	r0, r0, r3
    221e:	4152      	adcs	r2, r2
    2220:	0a43      	lsrs	r3, r0, #9
    2222:	428b      	cmp	r3, r1
    2224:	d301      	bcc.n	222a <__udivsi3+0x8e>
    2226:	024b      	lsls	r3, r1, #9
    2228:	1ac0      	subs	r0, r0, r3
    222a:	4152      	adcs	r2, r2
    222c:	0a03      	lsrs	r3, r0, #8
    222e:	428b      	cmp	r3, r1
    2230:	d301      	bcc.n	2236 <__udivsi3+0x9a>
    2232:	020b      	lsls	r3, r1, #8
    2234:	1ac0      	subs	r0, r0, r3
    2236:	4152      	adcs	r2, r2
    2238:	d2cd      	bcs.n	21d6 <__udivsi3+0x3a>
    223a:	09c3      	lsrs	r3, r0, #7
    223c:	428b      	cmp	r3, r1
    223e:	d301      	bcc.n	2244 <__udivsi3+0xa8>
    2240:	01cb      	lsls	r3, r1, #7
    2242:	1ac0      	subs	r0, r0, r3
    2244:	4152      	adcs	r2, r2
    2246:	0983      	lsrs	r3, r0, #6
    2248:	428b      	cmp	r3, r1
    224a:	d301      	bcc.n	2250 <__udivsi3+0xb4>
    224c:	018b      	lsls	r3, r1, #6
    224e:	1ac0      	subs	r0, r0, r3
    2250:	4152      	adcs	r2, r2
    2252:	0943      	lsrs	r3, r0, #5
    2254:	428b      	cmp	r3, r1
    2256:	d301      	bcc.n	225c <__udivsi3+0xc0>
    2258:	014b      	lsls	r3, r1, #5
    225a:	1ac0      	subs	r0, r0, r3
    225c:	4152      	adcs	r2, r2
    225e:	0903      	lsrs	r3, r0, #4
    2260:	428b      	cmp	r3, r1
    2262:	d301      	bcc.n	2268 <__udivsi3+0xcc>
    2264:	010b      	lsls	r3, r1, #4
    2266:	1ac0      	subs	r0, r0, r3
    2268:	4152      	adcs	r2, r2
    226a:	08c3      	lsrs	r3, r0, #3
    226c:	428b      	cmp	r3, r1
    226e:	d301      	bcc.n	2274 <__udivsi3+0xd8>
    2270:	00cb      	lsls	r3, r1, #3
    2272:	1ac0      	subs	r0, r0, r3
    2274:	4152      	adcs	r2, r2
    2276:	0883      	lsrs	r3, r0, #2
    2278:	428b      	cmp	r3, r1
    227a:	d301      	bcc.n	2280 <__udivsi3+0xe4>
    227c:	008b      	lsls	r3, r1, #2
    227e:	1ac0      	subs	r0, r0, r3
    2280:	4152      	adcs	r2, r2
    2282:	0843      	lsrs	r3, r0, #1
    2284:	428b      	cmp	r3, r1
    2286:	d301      	bcc.n	228c <__udivsi3+0xf0>
    2288:	004b      	lsls	r3, r1, #1
    228a:	1ac0      	subs	r0, r0, r3
    228c:	4152      	adcs	r2, r2
    228e:	1a41      	subs	r1, r0, r1
    2290:	d200      	bcs.n	2294 <__udivsi3+0xf8>
    2292:	4601      	mov	r1, r0
    2294:	4152      	adcs	r2, r2
    2296:	4610      	mov	r0, r2
    2298:	4770      	bx	lr
    229a:	e7ff      	b.n	229c <__udivsi3+0x100>
    229c:	b501      	push	{r0, lr}
    229e:	2000      	movs	r0, #0
    22a0:	f000 f806 	bl	22b0 <__aeabi_idiv0>
    22a4:	bd02      	pop	{r1, pc}
    22a6:	46c0      	nop			; (mov r8, r8)

000022a8 <__aeabi_uidivmod>:
    22a8:	2900      	cmp	r1, #0
    22aa:	d0f7      	beq.n	229c <__udivsi3+0x100>
    22ac:	e776      	b.n	219c <__udivsi3>
    22ae:	4770      	bx	lr

000022b0 <__aeabi_idiv0>:
    22b0:	4770      	bx	lr
    22b2:	46c0      	nop			; (mov r8, r8)

000022b4 <__libc_init_array>:
    22b4:	b570      	push	{r4, r5, r6, lr}
    22b6:	2600      	movs	r6, #0
    22b8:	4d0c      	ldr	r5, [pc, #48]	; (22ec <__libc_init_array+0x38>)
    22ba:	4c0d      	ldr	r4, [pc, #52]	; (22f0 <__libc_init_array+0x3c>)
    22bc:	1b64      	subs	r4, r4, r5
    22be:	10a4      	asrs	r4, r4, #2
    22c0:	42a6      	cmp	r6, r4
    22c2:	d109      	bne.n	22d8 <__libc_init_array+0x24>
    22c4:	2600      	movs	r6, #0
    22c6:	f000 f911 	bl	24ec <_init>
    22ca:	4d0a      	ldr	r5, [pc, #40]	; (22f4 <__libc_init_array+0x40>)
    22cc:	4c0a      	ldr	r4, [pc, #40]	; (22f8 <__libc_init_array+0x44>)
    22ce:	1b64      	subs	r4, r4, r5
    22d0:	10a4      	asrs	r4, r4, #2
    22d2:	42a6      	cmp	r6, r4
    22d4:	d105      	bne.n	22e2 <__libc_init_array+0x2e>
    22d6:	bd70      	pop	{r4, r5, r6, pc}
    22d8:	00b3      	lsls	r3, r6, #2
    22da:	58eb      	ldr	r3, [r5, r3]
    22dc:	4798      	blx	r3
    22de:	3601      	adds	r6, #1
    22e0:	e7ee      	b.n	22c0 <__libc_init_array+0xc>
    22e2:	00b3      	lsls	r3, r6, #2
    22e4:	58eb      	ldr	r3, [r5, r3]
    22e6:	4798      	blx	r3
    22e8:	3601      	adds	r6, #1
    22ea:	e7f2      	b.n	22d2 <__libc_init_array+0x1e>
    22ec:	200000e8 	.word	0x200000e8
    22f0:	200000e8 	.word	0x200000e8
    22f4:	200000e8 	.word	0x200000e8
    22f8:	200000f8 	.word	0x200000f8

000022fc <malloc>:
    22fc:	b510      	push	{r4, lr}
    22fe:	4b03      	ldr	r3, [pc, #12]	; (230c <malloc+0x10>)
    2300:	0001      	movs	r1, r0
    2302:	6818      	ldr	r0, [r3, #0]
    2304:	f000 f86a 	bl	23dc <_malloc_r>
    2308:	bd10      	pop	{r4, pc}
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	20000084 	.word	0x20000084

00002310 <free>:
    2310:	b510      	push	{r4, lr}
    2312:	4b03      	ldr	r3, [pc, #12]	; (2320 <free+0x10>)
    2314:	0001      	movs	r1, r0
    2316:	6818      	ldr	r0, [r3, #0]
    2318:	f000 f816 	bl	2348 <_free_r>
    231c:	bd10      	pop	{r4, pc}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	20000084 	.word	0x20000084

00002324 <memcpy>:
    2324:	2300      	movs	r3, #0
    2326:	b510      	push	{r4, lr}
    2328:	429a      	cmp	r2, r3
    232a:	d100      	bne.n	232e <memcpy+0xa>
    232c:	bd10      	pop	{r4, pc}
    232e:	5ccc      	ldrb	r4, [r1, r3]
    2330:	54c4      	strb	r4, [r0, r3]
    2332:	3301      	adds	r3, #1
    2334:	e7f8      	b.n	2328 <memcpy+0x4>

00002336 <memset>:
    2336:	0003      	movs	r3, r0
    2338:	1882      	adds	r2, r0, r2
    233a:	4293      	cmp	r3, r2
    233c:	d100      	bne.n	2340 <memset+0xa>
    233e:	4770      	bx	lr
    2340:	7019      	strb	r1, [r3, #0]
    2342:	3301      	adds	r3, #1
    2344:	e7f9      	b.n	233a <memset+0x4>
	...

00002348 <_free_r>:
    2348:	b570      	push	{r4, r5, r6, lr}
    234a:	0005      	movs	r5, r0
    234c:	2900      	cmp	r1, #0
    234e:	d010      	beq.n	2372 <_free_r+0x2a>
    2350:	1f0c      	subs	r4, r1, #4
    2352:	6823      	ldr	r3, [r4, #0]
    2354:	2b00      	cmp	r3, #0
    2356:	da00      	bge.n	235a <_free_r+0x12>
    2358:	18e4      	adds	r4, r4, r3
    235a:	0028      	movs	r0, r5
    235c:	f000 f8b5 	bl	24ca <__malloc_lock>
    2360:	4a1d      	ldr	r2, [pc, #116]	; (23d8 <_free_r+0x90>)
    2362:	6813      	ldr	r3, [r2, #0]
    2364:	2b00      	cmp	r3, #0
    2366:	d105      	bne.n	2374 <_free_r+0x2c>
    2368:	6063      	str	r3, [r4, #4]
    236a:	6014      	str	r4, [r2, #0]
    236c:	0028      	movs	r0, r5
    236e:	f000 f8ad 	bl	24cc <__malloc_unlock>
    2372:	bd70      	pop	{r4, r5, r6, pc}
    2374:	42a3      	cmp	r3, r4
    2376:	d909      	bls.n	238c <_free_r+0x44>
    2378:	6821      	ldr	r1, [r4, #0]
    237a:	1860      	adds	r0, r4, r1
    237c:	4283      	cmp	r3, r0
    237e:	d1f3      	bne.n	2368 <_free_r+0x20>
    2380:	6818      	ldr	r0, [r3, #0]
    2382:	685b      	ldr	r3, [r3, #4]
    2384:	1841      	adds	r1, r0, r1
    2386:	6021      	str	r1, [r4, #0]
    2388:	e7ee      	b.n	2368 <_free_r+0x20>
    238a:	0013      	movs	r3, r2
    238c:	685a      	ldr	r2, [r3, #4]
    238e:	2a00      	cmp	r2, #0
    2390:	d001      	beq.n	2396 <_free_r+0x4e>
    2392:	42a2      	cmp	r2, r4
    2394:	d9f9      	bls.n	238a <_free_r+0x42>
    2396:	6819      	ldr	r1, [r3, #0]
    2398:	1858      	adds	r0, r3, r1
    239a:	42a0      	cmp	r0, r4
    239c:	d10b      	bne.n	23b6 <_free_r+0x6e>
    239e:	6820      	ldr	r0, [r4, #0]
    23a0:	1809      	adds	r1, r1, r0
    23a2:	1858      	adds	r0, r3, r1
    23a4:	6019      	str	r1, [r3, #0]
    23a6:	4282      	cmp	r2, r0
    23a8:	d1e0      	bne.n	236c <_free_r+0x24>
    23aa:	6810      	ldr	r0, [r2, #0]
    23ac:	6852      	ldr	r2, [r2, #4]
    23ae:	1841      	adds	r1, r0, r1
    23b0:	6019      	str	r1, [r3, #0]
    23b2:	605a      	str	r2, [r3, #4]
    23b4:	e7da      	b.n	236c <_free_r+0x24>
    23b6:	42a0      	cmp	r0, r4
    23b8:	d902      	bls.n	23c0 <_free_r+0x78>
    23ba:	230c      	movs	r3, #12
    23bc:	602b      	str	r3, [r5, #0]
    23be:	e7d5      	b.n	236c <_free_r+0x24>
    23c0:	6821      	ldr	r1, [r4, #0]
    23c2:	1860      	adds	r0, r4, r1
    23c4:	4282      	cmp	r2, r0
    23c6:	d103      	bne.n	23d0 <_free_r+0x88>
    23c8:	6810      	ldr	r0, [r2, #0]
    23ca:	6852      	ldr	r2, [r2, #4]
    23cc:	1841      	adds	r1, r0, r1
    23ce:	6021      	str	r1, [r4, #0]
    23d0:	6062      	str	r2, [r4, #4]
    23d2:	605c      	str	r4, [r3, #4]
    23d4:	e7ca      	b.n	236c <_free_r+0x24>
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	20000b98 	.word	0x20000b98

000023dc <_malloc_r>:
    23dc:	2303      	movs	r3, #3
    23de:	b570      	push	{r4, r5, r6, lr}
    23e0:	1ccd      	adds	r5, r1, #3
    23e2:	439d      	bics	r5, r3
    23e4:	3508      	adds	r5, #8
    23e6:	0006      	movs	r6, r0
    23e8:	2d0c      	cmp	r5, #12
    23ea:	d21e      	bcs.n	242a <_malloc_r+0x4e>
    23ec:	250c      	movs	r5, #12
    23ee:	42a9      	cmp	r1, r5
    23f0:	d81d      	bhi.n	242e <_malloc_r+0x52>
    23f2:	0030      	movs	r0, r6
    23f4:	f000 f869 	bl	24ca <__malloc_lock>
    23f8:	4a25      	ldr	r2, [pc, #148]	; (2490 <_malloc_r+0xb4>)
    23fa:	6814      	ldr	r4, [r2, #0]
    23fc:	0021      	movs	r1, r4
    23fe:	2900      	cmp	r1, #0
    2400:	d119      	bne.n	2436 <_malloc_r+0x5a>
    2402:	4c24      	ldr	r4, [pc, #144]	; (2494 <_malloc_r+0xb8>)
    2404:	6823      	ldr	r3, [r4, #0]
    2406:	2b00      	cmp	r3, #0
    2408:	d103      	bne.n	2412 <_malloc_r+0x36>
    240a:	0030      	movs	r0, r6
    240c:	f000 f844 	bl	2498 <_sbrk_r>
    2410:	6020      	str	r0, [r4, #0]
    2412:	0029      	movs	r1, r5
    2414:	0030      	movs	r0, r6
    2416:	f000 f83f 	bl	2498 <_sbrk_r>
    241a:	1c43      	adds	r3, r0, #1
    241c:	d12c      	bne.n	2478 <_malloc_r+0x9c>
    241e:	230c      	movs	r3, #12
    2420:	0030      	movs	r0, r6
    2422:	6033      	str	r3, [r6, #0]
    2424:	f000 f852 	bl	24cc <__malloc_unlock>
    2428:	e003      	b.n	2432 <_malloc_r+0x56>
    242a:	2d00      	cmp	r5, #0
    242c:	dadf      	bge.n	23ee <_malloc_r+0x12>
    242e:	230c      	movs	r3, #12
    2430:	6033      	str	r3, [r6, #0]
    2432:	2000      	movs	r0, #0
    2434:	bd70      	pop	{r4, r5, r6, pc}
    2436:	680b      	ldr	r3, [r1, #0]
    2438:	1b5b      	subs	r3, r3, r5
    243a:	d41a      	bmi.n	2472 <_malloc_r+0x96>
    243c:	2b0b      	cmp	r3, #11
    243e:	d903      	bls.n	2448 <_malloc_r+0x6c>
    2440:	600b      	str	r3, [r1, #0]
    2442:	18cc      	adds	r4, r1, r3
    2444:	6025      	str	r5, [r4, #0]
    2446:	e003      	b.n	2450 <_malloc_r+0x74>
    2448:	428c      	cmp	r4, r1
    244a:	d10e      	bne.n	246a <_malloc_r+0x8e>
    244c:	6863      	ldr	r3, [r4, #4]
    244e:	6013      	str	r3, [r2, #0]
    2450:	0030      	movs	r0, r6
    2452:	f000 f83b 	bl	24cc <__malloc_unlock>
    2456:	0020      	movs	r0, r4
    2458:	2207      	movs	r2, #7
    245a:	300b      	adds	r0, #11
    245c:	1d23      	adds	r3, r4, #4
    245e:	4390      	bics	r0, r2
    2460:	1ac3      	subs	r3, r0, r3
    2462:	d0e7      	beq.n	2434 <_malloc_r+0x58>
    2464:	425a      	negs	r2, r3
    2466:	50e2      	str	r2, [r4, r3]
    2468:	e7e4      	b.n	2434 <_malloc_r+0x58>
    246a:	684b      	ldr	r3, [r1, #4]
    246c:	6063      	str	r3, [r4, #4]
    246e:	000c      	movs	r4, r1
    2470:	e7ee      	b.n	2450 <_malloc_r+0x74>
    2472:	000c      	movs	r4, r1
    2474:	6849      	ldr	r1, [r1, #4]
    2476:	e7c2      	b.n	23fe <_malloc_r+0x22>
    2478:	2303      	movs	r3, #3
    247a:	1cc4      	adds	r4, r0, #3
    247c:	439c      	bics	r4, r3
    247e:	42a0      	cmp	r0, r4
    2480:	d0e0      	beq.n	2444 <_malloc_r+0x68>
    2482:	1a21      	subs	r1, r4, r0
    2484:	0030      	movs	r0, r6
    2486:	f000 f807 	bl	2498 <_sbrk_r>
    248a:	1c43      	adds	r3, r0, #1
    248c:	d1da      	bne.n	2444 <_malloc_r+0x68>
    248e:	e7c6      	b.n	241e <_malloc_r+0x42>
    2490:	20000b98 	.word	0x20000b98
    2494:	20000b9c 	.word	0x20000b9c

00002498 <_sbrk_r>:
    2498:	2300      	movs	r3, #0
    249a:	b570      	push	{r4, r5, r6, lr}
    249c:	4c06      	ldr	r4, [pc, #24]	; (24b8 <_sbrk_r+0x20>)
    249e:	0005      	movs	r5, r0
    24a0:	0008      	movs	r0, r1
    24a2:	6023      	str	r3, [r4, #0]
    24a4:	f000 f814 	bl	24d0 <_sbrk>
    24a8:	1c43      	adds	r3, r0, #1
    24aa:	d103      	bne.n	24b4 <_sbrk_r+0x1c>
    24ac:	6823      	ldr	r3, [r4, #0]
    24ae:	2b00      	cmp	r3, #0
    24b0:	d000      	beq.n	24b4 <_sbrk_r+0x1c>
    24b2:	602b      	str	r3, [r5, #0]
    24b4:	bd70      	pop	{r4, r5, r6, pc}
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	20000ba4 	.word	0x20000ba4

000024bc <strlen>:
    24bc:	2300      	movs	r3, #0
    24be:	5cc2      	ldrb	r2, [r0, r3]
    24c0:	3301      	adds	r3, #1
    24c2:	2a00      	cmp	r2, #0
    24c4:	d1fb      	bne.n	24be <strlen+0x2>
    24c6:	1e58      	subs	r0, r3, #1
    24c8:	4770      	bx	lr

000024ca <__malloc_lock>:
    24ca:	4770      	bx	lr

000024cc <__malloc_unlock>:
    24cc:	4770      	bx	lr
	...

000024d0 <_sbrk>:
    24d0:	4a04      	ldr	r2, [pc, #16]	; (24e4 <_sbrk+0x14>)
    24d2:	6813      	ldr	r3, [r2, #0]
    24d4:	2b00      	cmp	r3, #0
    24d6:	d003      	beq.n	24e0 <_sbrk+0x10>
    24d8:	1818      	adds	r0, r3, r0
    24da:	6010      	str	r0, [r2, #0]
    24dc:	0018      	movs	r0, r3
    24de:	4770      	bx	lr
    24e0:	4b01      	ldr	r3, [pc, #4]	; (24e8 <_sbrk+0x18>)
    24e2:	e7f9      	b.n	24d8 <_sbrk+0x8>
    24e4:	20000ba0 	.word	0x20000ba0
    24e8:	20000ba8 	.word	0x20000ba8

000024ec <_init>:
    24ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    24f2:	bc08      	pop	{r3}
    24f4:	469e      	mov	lr, r3
    24f6:	4770      	bx	lr

000024f8 <_fini>:
    24f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    24fe:	bc08      	pop	{r3}
    2500:	469e      	mov	lr, r3
    2502:	4770      	bx	lr
    2504:	4c4c4548 	.word	0x4c4c4548
    2508:	0000004f 	.word	0x0000004f

0000250c <_ZTV26DoubleBufferedEPOutHandler>:
	...
    2514:	0000092f 00000811 0000076d 000005d5     /.......m.......
    2524:	000005e9                                ....

00002528 <_ZL14STRING_PRODUCT>:
    2528:	75647241 206f6e69 5020304d 00006f72     Arduino M0 Pro..

00002538 <_ZL15STRING_LANGUAGE>:
    2538:	04090304                                ....

0000253c <_ZL19STRING_MANUFACTURER>:
    253c:	75647241 206f6e69 00434c4c              Arduino LLC.

00002548 <_ZL21USB_DeviceDescriptorB>:
    2548:	02000112 400102ef 804f2a03 02010100     .......@.*O.....
    2558:	00000103                                ....

0000255c <g_APinDescription>:
    255c:	00000000 0000000b 00000002 00000004     ................
    256c:	ffff00ff 000bffff 00000000 0000000a     ................
    257c:	00000002 00000004 ffff00ff 000affff     ................
    258c:	00000000 00000008 00000004 0000001c     ................
    259c:	000000ff 00ff0000 00000000 00000009     ................
    25ac:	00000004 0000001c 000100ff 00090001     ................
    25bc:	00000000 0000000e 00000004 0000001c     ................
    25cc:	030000ff 000e0300 00000000 0000000f     ................
    25dc:	00000004 0000001c 030100ff 000f0301     ................
    25ec:	00000000 00000014 00000005 0000002c     ............,...
    25fc:	000200ff 00040002 00000000 00000015     ................
    260c:	00000005 0000002c 000300ff 00050003     ....,...........
    261c:	00000000 00000006 00000004 0000001c     ................
    262c:	010000ff 00060100 00000000 00000007     ................
    263c:	00000004 0000001c 010100ff 00070101     ................
    264c:	00000000 00000012 00000004 0000001c     ................
    265c:	030000ff 00020300 00000000 00000010     ................
    266c:	00000004 0000001c 020000ff 00000200     ................
    267c:	00000000 00000013 00000004 0000001c     ................
    268c:	030100ff 00030301 00000000 00000011     ................
    269c:	00000004 0000001c 020100ff 00010201     ................
    26ac:	000000ff 00000000 000000ff 00000000     ................
    26bc:	ffff00ff 00ffffff 00000000 00000003     ................
    26cc:	00000001 00000002 ffff00ff 00ffffff     ................
    26dc:	00000000 00000016 00000002 00000004     ................
    26ec:	ffff00ff 0006ffff 00000000 00000017     ................
    26fc:	00000002 00000004 ffff00ff 0007ffff     ................
    270c:	00000000 0000000c 00000003 00000004     ................
    271c:	ffff00ff 000cffff 000000ff 00000000     ................
    272c:	000000ff 00000000 ffff00ff 00ffffff     ................
    273c:	00000001 0000000b 00000003 00000004     ................
    274c:	ffff00ff 000bffff 00000001 0000000a     ................
    275c:	00000003 00000004 ffff00ff 000affff     ................
    276c:	000000ff 00000000 000000ff 00000000     ................
    277c:	ffff00ff 00ffffff 000000ff 00000000     ................
    278c:	000000ff 00000000 ffff00ff 00ffffff     ................
    279c:	00000000 00000002 00000001 00000002     ................
    27ac:	ffff0000 0002ffff 00000001 00000008     ................
    27bc:	00000001 00000002 ffff0002 0008ffff     ................
    27cc:	00000001 00000009 00000001 00000002     ................
    27dc:	ffff0003 0009ffff 00000000 00000004     ................
    27ec:	00000001 00000002 ffff0004 0004ffff     ................
    27fc:	00000000 00000005 00000001 00000002     ................
    280c:	ffff0005 0005ffff 00000001 00000002     ................
    281c:	00000001 00000002 ffff000a 0002ffff     ................
    282c:	00000001 00000003 0000000b 00000004     ................
    283c:	ffff00ff 00ffffff 00000000 0000001b     ................
    284c:	0000000b 00000004 ffff00ff 00ffffff     ................
    285c:	00000000 0000001c 00000006 00000000     ................
    286c:	ffff00ff 00ffffff 00000000 00000018     ................
    287c:	00000006 00000000 ffff00ff 00ffffff     ................
    288c:	00000000 00000019 00000006 00000000     ................
    289c:	ffff00ff 00ffffff 00000001 00000016     ................
    28ac:	00000003 00000000 ffff00ff 00ffffff     ................
    28bc:	00000001 00000017 00000003 00000000     ................
    28cc:	ffff00ff 00ffffff 00000000 00000016     ................
    28dc:	00000002 00000000 ffff00ff 00ffffff     ................
    28ec:	00000000 00000017 00000002 00000000     ................
    28fc:	ffff00ff 00ffffff 00000000 00000013     ................
    290c:	00000002 00000000 ffff00ff 00ffffff     ................
    291c:	00000000 00000010 00000002 00000000     ................
    292c:	ffff00ff 00ffffff 00000000 00000012     ................
    293c:	00000002 00000000 ffff00ff 00ffffff     ................
    294c:	00000000 00000011 00000002 00000000     ................
    295c:	ffff00ff 00ffffff 00000000 0000000d     ................
    296c:	00000004 0000000c 000100ff 000dffff     ................
    297c:	00000000 00000015 00000005 0000000c     ................
    298c:	000300ff 00ffffff 00000000 00000006     ................
    299c:	00000004 0000000c 010000ff 00ffffff     ................
    29ac:	00000000 00000007 00000004 0000000c     ................
    29bc:	010100ff 00ffffff 00000000 00000002     ................
    29cc:	00000001 00000002 ffff0014 0002ffff     ................

000029dc <_ZTV4Uart>:
	...
    29e4:	00001e69 00002161 00001d8f 00001d4b     i...a!......K...
    29f4:	00001d65 00001f1d 00001b2d 00001b1d     e.......-.......
    2a04:	00001bb1 00001b47 00001b19              ....G.......

00002a10 <_ZTV7Serial_>:
	...
    2a18:	00001f6d 00001f99 00001f69 00001f8d     m.......i.......
    2a28:	00001f81 00001fd1 00001fb5              ............

00002a34 <__EH_FRAME_BEGIN__>:
    2a34:	00000000                                ....
